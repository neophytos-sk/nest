!!! nest: multiple -> ::nest::lang::container_helper
!!! nest: map -> ::nest::lang::container_helper
!!! nest: typedecl -> ::nest::lang::typedecl_helper
!!! nest: typeinst -> ::nest::lang::typeinst_helper
!!! nest: base_type -> nest {type_helper}
!!! nest: varchar -> type_helper
!!! nest: bool -> type_helper
!!! nest: varint -> type_helper
!!! nest: byte -> type_helper
!!! nest: int16 -> type_helper
!!! nest: int32 -> type_helper
!!! nest: int64 -> type_helper
!!! nest: double -> type_helper
!!! nest: struct -> nest {nest {type_helper}}
--->>> (type_helper) varchar name {*}
--->>> (typedecl_helper) context_path=struct stack_ctx={{typedecl object typedecl} {typedecl base_type varchar} {eval struct struct} {typedecl object struct}}
--->>> (type_helper) varchar type {*}
--->>> (typedecl_helper) context_path=struct stack_ctx={{typedecl object typedecl} {typedecl base_type varchar} {eval struct struct} {typedecl object struct}}
--->>> (type_helper) varchar nsp {*}
--->>> (typedecl_helper) context_path=struct stack_ctx={{typedecl object typedecl} {typedecl base_type varchar} {eval struct struct} {typedecl object struct}}
@@@@ (container_helper) llength_args=4 instantiation_p=0
++++++ (container declaration) tag=type=struct name=slot args== {} {
        varchar parent
        varchar name
        varchar type
        varchar default_value = ""
        bool optional_p = false
        varchar container = ""
    } stack_ctx={eval struct struct} {typedecl object struct} context=eval struct struct
--->>> (type_helper) varchar parent {*}
--->>> (typedecl_helper) context_path=struct.slot stack_ctx={{typedecl object typedecl} {typedecl base_type varchar} {eval struct slot} {typedecl object struct} {eval struct struct} {typedecl object struct}}
--->>> (type_helper) varchar name {*}
--->>> (typedecl_helper) context_path=struct.slot stack_ctx={{typedecl object typedecl} {typedecl base_type varchar} {eval struct slot} {typedecl object struct} {eval struct struct} {typedecl object struct}}
--->>> (type_helper) varchar type {*}
--->>> (typedecl_helper) context_path=struct.slot stack_ctx={{typedecl object typedecl} {typedecl base_type varchar} {eval struct slot} {typedecl object struct} {eval struct struct} {typedecl object struct}}
--->>> (type_helper) varchar default_value {*}= {}
--->>> (typedecl_helper) context_path=struct.slot stack_ctx={{typedecl object typedecl} {typedecl base_type varchar} {eval struct slot} {typedecl object struct} {eval struct struct} {typedecl object struct}}
--->>> (type_helper) bool optional_p {*}= false
--->>> (typedecl_helper) context_path=struct.slot stack_ctx={{typedecl object typedecl} {typedecl base_type bool} {eval struct slot} {typedecl object struct} {eval struct struct} {typedecl object struct}}
--->>> (type_helper) varchar container {*}= {}
--->>> (typedecl_helper) context_path=struct.slot stack_ctx={{typedecl object typedecl} {typedecl base_type varchar} {eval struct slot} {typedecl object struct} {eval struct struct} {typedecl object struct}}
!!! nest: slot -> nest {type_helper}
!!! nest: instantiate empty slot slot.parent
--->>> (typeinst_helper) inst_type=slot inst_name=parent context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl object struct} {eval struct struct} {typedecl object struct}}
!!! nest: instantiate empty slot slot.name
--->>> (typeinst_helper) inst_type=slot inst_name=name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl object struct} {eval struct struct} {typedecl object struct}}
!!! nest: instantiate empty slot slot.type
--->>> (typeinst_helper) inst_type=slot inst_name=type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl object struct} {eval struct struct} {typedecl object struct}}
!!! nest: instantiate empty slot slot.default_value
--->>> (typeinst_helper) inst_type=slot inst_name=default_value context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl object struct} {eval struct struct} {typedecl object struct}}
!!! nest: instantiate empty slot slot.optional_p
--->>> (typeinst_helper) inst_type=slot inst_name=optional_p context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl object struct} {eval struct struct} {typedecl object struct}}
!!! nest: instantiate empty slot slot.container
--->>> (typeinst_helper) inst_type=slot inst_name=container context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl object struct} {eval struct struct} {typedecl object struct}}
--->>> (unknown) type struct args= stack_ctx={{typedecl object struct} {typedecl object struct}}
--->>> (unknown) checking each context for "type" -> struct.type (1)
+++ type struct  -> redirect_name=struct.type
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=struct
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.type} {unknown unknown struct.type} {typedecl object struct} {eval struct struct} {typedecl object struct}}
--->>> (unknown) name slot args= stack_ctx={{typedecl object struct} {typedecl object struct}}
--->>> (unknown) checking each context for "name" -> struct.name (1)
+++ name slot  -> redirect_name=struct.name
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=slot
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.name} {unknown unknown struct.name} {typedecl object struct} {eval struct struct} {typedecl object struct}}
--->>> (unknown) nsp ::nest::lang args= stack_ctx={{typedecl object struct} {typedecl object struct}}
--->>> (unknown) checking each context for "nsp" -> struct.nsp (1)
+++ nsp ::nest::lang  -> redirect_name=struct.nsp
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=::nest::lang
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.nsp context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.nsp} {unknown unknown struct.nsp} {typedecl object struct} {eval struct struct} {typedecl object struct}}
!!! nest: instantiate full slot slot.parent
////// (typeinst_args) lookahead_ctx=typedecl struct slot inst_type=slot args={{
                        struct.slot.name [domNode0x1a72d50 @x-name]
                        struct.slot.type [domNode0x1a72d50 @x-type]
                        struct.slot.parent slot
                        if { [domNode0x1a72d50 hasAttribute "x-default_value"] } {
                            struct.slot.default_value [domNode0x1a72d50 @x-default_value ""]
                        }
                        if { [domNode0x1a72d50 hasAttribute "x-optional_p"] } {
                            struct.slot.optional_p [domNode0x1a72d50 @x-optional_p ""]
                        }
                        if { [domNode0x1a72d50 hasAttribute "x-container"] } {
                            struct.slot.container [domNode0x1a72d50 @x-container ""]
                        }
                    }}
--->>> (typeinst_helper) inst_type=slot inst_name=parent context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl object struct} {eval struct struct} {typedecl object struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=parent
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.name} {eval typeinst parent} {typeinst slot parent} {typedecl object typeinst} {typedecl object struct} {eval struct struct} {typedecl object struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=varchar
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.type} {eval typeinst parent} {typeinst slot parent} {typedecl object typeinst} {typedecl object struct} {eval struct struct} {typedecl object struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=slot
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.parent context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.parent} {eval typeinst parent} {typeinst slot parent} {typedecl object typeinst} {typedecl object struct} {eval struct struct} {typedecl object struct}}
!!! nest: instantiate full slot slot.name
////// (typeinst_args) lookahead_ctx=typedecl struct slot inst_type=slot args={{
                        struct.slot.name [domNode0x1a72e90 @x-name]
                        struct.slot.type [domNode0x1a72e90 @x-type]
                        struct.slot.parent slot
                        if { [domNode0x1a72e90 hasAttribute "x-default_value"] } {
                            struct.slot.default_value [domNode0x1a72e90 @x-default_value ""]
                        }
                        if { [domNode0x1a72e90 hasAttribute "x-optional_p"] } {
                            struct.slot.optional_p [domNode0x1a72e90 @x-optional_p ""]
                        }
                        if { [domNode0x1a72e90 hasAttribute "x-container"] } {
                            struct.slot.container [domNode0x1a72e90 @x-container ""]
                        }
                    }}
--->>> (typeinst_helper) inst_type=slot inst_name=name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl object struct} {eval struct struct} {typedecl object struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=name
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.name} {eval typeinst name} {typeinst slot name} {typedecl object typeinst} {typedecl object struct} {eval struct struct} {typedecl object struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=varchar
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.type} {eval typeinst name} {typeinst slot name} {typedecl object typeinst} {typedecl object struct} {eval struct struct} {typedecl object struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=slot
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.parent context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.parent} {eval typeinst name} {typeinst slot name} {typedecl object typeinst} {typedecl object struct} {eval struct struct} {typedecl object struct}}
!!! nest: instantiate full slot slot.type
////// (typeinst_args) lookahead_ctx=typedecl struct slot inst_type=slot args={{
                        struct.slot.name [domNode0x1a72fd0 @x-name]
                        struct.slot.type [domNode0x1a72fd0 @x-type]
                        struct.slot.parent slot
                        if { [domNode0x1a72fd0 hasAttribute "x-default_value"] } {
                            struct.slot.default_value [domNode0x1a72fd0 @x-default_value ""]
                        }
                        if { [domNode0x1a72fd0 hasAttribute "x-optional_p"] } {
                            struct.slot.optional_p [domNode0x1a72fd0 @x-optional_p ""]
                        }
                        if { [domNode0x1a72fd0 hasAttribute "x-container"] } {
                            struct.slot.container [domNode0x1a72fd0 @x-container ""]
                        }
                    }}
--->>> (typeinst_helper) inst_type=slot inst_name=type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl object struct} {eval struct struct} {typedecl object struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=type
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.name} {eval typeinst type} {typeinst slot type} {typedecl object typeinst} {typedecl object struct} {eval struct struct} {typedecl object struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=varchar
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.type} {eval typeinst type} {typeinst slot type} {typedecl object typeinst} {typedecl object struct} {eval struct struct} {typedecl object struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=slot
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.parent context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.parent} {eval typeinst type} {typeinst slot type} {typedecl object typeinst} {typedecl object struct} {eval struct struct} {typedecl object struct}}
!!! nest: instantiate full slot slot.default_value
////// (typeinst_args) lookahead_ctx=typedecl struct slot inst_type=slot args={{
                        struct.slot.name [domNode0x1a73110 @x-name]
                        struct.slot.type [domNode0x1a73110 @x-type]
                        struct.slot.parent slot
                        if { [domNode0x1a73110 hasAttribute "x-default_value"] } {
                            struct.slot.default_value [domNode0x1a73110 @x-default_value ""]
                        }
                        if { [domNode0x1a73110 hasAttribute "x-optional_p"] } {
                            struct.slot.optional_p [domNode0x1a73110 @x-optional_p ""]
                        }
                        if { [domNode0x1a73110 hasAttribute "x-container"] } {
                            struct.slot.container [domNode0x1a73110 @x-container ""]
                        }
                    }}
--->>> (typeinst_helper) inst_type=slot inst_name=default_value context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl object struct} {eval struct struct} {typedecl object struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=default_value
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.name} {eval typeinst default_value} {typeinst slot default_value} {typedecl object typeinst} {typedecl object struct} {eval struct struct} {typedecl object struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=varchar
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.type} {eval typeinst default_value} {typeinst slot default_value} {typedecl object typeinst} {typedecl object struct} {eval struct struct} {typedecl object struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=slot
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.parent context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.parent} {eval typeinst default_value} {typeinst slot default_value} {typedecl object typeinst} {typedecl object struct} {eval struct struct} {typedecl object struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args={{}}
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.default_value context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.default_value} {eval typeinst default_value} {typeinst slot default_value} {typedecl object typeinst} {typedecl object struct} {eval struct struct} {typedecl object struct}}
!!! nest: instantiate full slot slot.optional_p
////// (typeinst_args) lookahead_ctx=typedecl struct slot inst_type=slot args={{
                        struct.slot.name [domNode0x1a732b0 @x-name]
                        struct.slot.type [domNode0x1a732b0 @x-type]
                        struct.slot.parent slot
                        if { [domNode0x1a732b0 hasAttribute "x-default_value"] } {
                            struct.slot.default_value [domNode0x1a732b0 @x-default_value ""]
                        }
                        if { [domNode0x1a732b0 hasAttribute "x-optional_p"] } {
                            struct.slot.optional_p [domNode0x1a732b0 @x-optional_p ""]
                        }
                        if { [domNode0x1a732b0 hasAttribute "x-container"] } {
                            struct.slot.container [domNode0x1a732b0 @x-container ""]
                        }
                    }}
--->>> (typeinst_helper) inst_type=slot inst_name=optional_p context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl object struct} {eval struct struct} {typedecl object struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=optional_p
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.name} {eval typeinst optional_p} {typeinst slot optional_p} {typedecl object typeinst} {typedecl object struct} {eval struct struct} {typedecl object struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=bool
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.type} {eval typeinst optional_p} {typeinst slot optional_p} {typedecl object typeinst} {typedecl object struct} {eval struct struct} {typedecl object struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=slot
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.parent context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.parent} {eval typeinst optional_p} {typeinst slot optional_p} {typedecl object typeinst} {typedecl object struct} {eval struct struct} {typedecl object struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=false
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.default_value context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.default_value} {eval typeinst optional_p} {typeinst slot optional_p} {typedecl object typeinst} {typedecl object struct} {eval struct struct} {typedecl object struct}}
!!! nest: instantiate full slot slot.container
////// (typeinst_args) lookahead_ctx=typedecl struct slot inst_type=slot args={{
                        struct.slot.name [domNode0x1a73450 @x-name]
                        struct.slot.type [domNode0x1a73450 @x-type]
                        struct.slot.parent slot
                        if { [domNode0x1a73450 hasAttribute "x-default_value"] } {
                            struct.slot.default_value [domNode0x1a73450 @x-default_value ""]
                        }
                        if { [domNode0x1a73450 hasAttribute "x-optional_p"] } {
                            struct.slot.optional_p [domNode0x1a73450 @x-optional_p ""]
                        }
                        if { [domNode0x1a73450 hasAttribute "x-container"] } {
                            struct.slot.container [domNode0x1a73450 @x-container ""]
                        }
                    }}
--->>> (typeinst_helper) inst_type=slot inst_name=container context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl object struct} {eval struct struct} {typedecl object struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=container
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.name} {eval typeinst container} {typeinst slot container} {typedecl object typeinst} {typedecl object struct} {eval struct struct} {typedecl object struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=varchar
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.type} {eval typeinst container} {typeinst slot container} {typedecl object typeinst} {typedecl object struct} {eval struct struct} {typedecl object struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=slot
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.parent context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.parent} {eval typeinst container} {typeinst slot container} {typedecl object typeinst} {typedecl object struct} {eval struct struct} {typedecl object struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args={{}}
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.default_value context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.default_value} {eval typeinst container} {typeinst slot container} {typedecl object typeinst} {typedecl object struct} {eval struct struct} {typedecl object struct}}
llength_args=4 args=-x-container multiple -x-default_value {} {
        varchar parent
        varchar name
        varchar type
        varchar default_value = ""
        bool optional_p = false
        varchar container = ""
    } cmd=struct slot -x-container multiple -x-default_value {} {
        varchar parent
        varchar name
        varchar type
        varchar default_value = ""
        bool optional_p = false
        varchar container = ""
    }
--->>> (type_helper) varchar pk {*}
--->>> (typedecl_helper) context_path=struct stack_ctx={{typedecl object typedecl} {typedecl base_type varchar} {eval struct struct} {typedecl object struct}}
--->>> (type_helper) bool is_final_if_no_scope {*}
--->>> (typedecl_helper) context_path=struct stack_ctx={{typedecl object typedecl} {typedecl base_type bool} {eval struct struct} {typedecl object struct}}
!!! nest: struct -> nest {type_helper}
!!! nest: instantiate empty slot struct.name
--->>> (typeinst_helper) inst_type=slot inst_name=name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl object struct}}
!!! nest: instantiate empty slot struct.type
--->>> (typeinst_helper) inst_type=slot inst_name=type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl object struct}}
!!! nest: instantiate empty slot struct.nsp
--->>> (typeinst_helper) inst_type=slot inst_name=nsp context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl object struct}}
!!! nest: instantiate empty slot struct.pk
--->>> (typeinst_helper) inst_type=slot inst_name=pk context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl object struct}}
!!! nest: instantiate empty slot struct.is_final_if_no_scope
--->>> (typeinst_helper) inst_type=slot inst_name=is_final_if_no_scope context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl object struct}}
--->>> (unknown) type struct args= stack_ctx={{typedecl object struct}}
--->>> (unknown) checking each context for "type" -> struct.type (1)
+++ type struct  -> redirect_name=struct.type
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=struct
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.type} {unknown unknown struct.type} {typedecl object struct}}
--->>> (unknown) name struct args= stack_ctx={{typedecl object struct}}
--->>> (unknown) checking each context for "name" -> struct.name (1)
+++ name struct  -> redirect_name=struct.name
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=struct
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.name} {unknown unknown struct.name} {typedecl object struct}}
--->>> (unknown) nsp ::nest::data args= stack_ctx={{typedecl object struct}}
--->>> (unknown) checking each context for "nsp" -> struct.nsp (1)
+++ nsp ::nest::data  -> redirect_name=struct.nsp
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=::nest::data
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.nsp context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.nsp} {unknown unknown struct.nsp} {typedecl object struct}}
!!! nest: instantiate full slot struct.name
////// (typeinst_args) lookahead_ctx=typedecl struct slot inst_type=slot args={{
                        struct.slot.name [domNode0x1a72770 @x-name]
                        struct.slot.type [domNode0x1a72770 @x-type]
                        struct.slot.parent struct
                        if { [domNode0x1a72770 hasAttribute "x-default_value"] } {
                            struct.slot.default_value [domNode0x1a72770 @x-default_value ""]
                        }
                        if { [domNode0x1a72770 hasAttribute "x-optional_p"] } {
                            struct.slot.optional_p [domNode0x1a72770 @x-optional_p ""]
                        }
                        if { [domNode0x1a72770 hasAttribute "x-container"] } {
                            struct.slot.container [domNode0x1a72770 @x-container ""]
                        }
                    }}
--->>> (typeinst_helper) inst_type=slot inst_name=name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl object struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=name
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.name} {eval typeinst name} {typeinst slot name} {typedecl object typeinst} {typedecl object struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=varchar
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.type} {eval typeinst name} {typeinst slot name} {typedecl object typeinst} {typedecl object struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=struct
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.parent context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.parent} {eval typeinst name} {typeinst slot name} {typedecl object typeinst} {typedecl object struct}}
!!! nest: instantiate full slot struct.type
////// (typeinst_args) lookahead_ctx=typedecl struct slot inst_type=slot args={{
                        struct.slot.name [domNode0x1a728b0 @x-name]
                        struct.slot.type [domNode0x1a728b0 @x-type]
                        struct.slot.parent struct
                        if { [domNode0x1a728b0 hasAttribute "x-default_value"] } {
                            struct.slot.default_value [domNode0x1a728b0 @x-default_value ""]
                        }
                        if { [domNode0x1a728b0 hasAttribute "x-optional_p"] } {
                            struct.slot.optional_p [domNode0x1a728b0 @x-optional_p ""]
                        }
                        if { [domNode0x1a728b0 hasAttribute "x-container"] } {
                            struct.slot.container [domNode0x1a728b0 @x-container ""]
                        }
                    }}
--->>> (typeinst_helper) inst_type=slot inst_name=type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl object struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=type
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.name} {eval typeinst type} {typeinst slot type} {typedecl object typeinst} {typedecl object struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=varchar
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.type} {eval typeinst type} {typeinst slot type} {typedecl object typeinst} {typedecl object struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=struct
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.parent context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.parent} {eval typeinst type} {typeinst slot type} {typedecl object typeinst} {typedecl object struct}}
!!! nest: instantiate full slot struct.nsp
////// (typeinst_args) lookahead_ctx=typedecl struct slot inst_type=slot args={{
                        struct.slot.name [domNode0x1a729f0 @x-name]
                        struct.slot.type [domNode0x1a729f0 @x-type]
                        struct.slot.parent struct
                        if { [domNode0x1a729f0 hasAttribute "x-default_value"] } {
                            struct.slot.default_value [domNode0x1a729f0 @x-default_value ""]
                        }
                        if { [domNode0x1a729f0 hasAttribute "x-optional_p"] } {
                            struct.slot.optional_p [domNode0x1a729f0 @x-optional_p ""]
                        }
                        if { [domNode0x1a729f0 hasAttribute "x-container"] } {
                            struct.slot.container [domNode0x1a729f0 @x-container ""]
                        }
                    }}
--->>> (typeinst_helper) inst_type=slot inst_name=nsp context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl object struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=nsp
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.name} {eval typeinst nsp} {typeinst slot nsp} {typedecl object typeinst} {typedecl object struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=varchar
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.type} {eval typeinst nsp} {typeinst slot nsp} {typedecl object typeinst} {typedecl object struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=struct
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.parent context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.parent} {eval typeinst nsp} {typeinst slot nsp} {typedecl object typeinst} {typedecl object struct}}
!!! nest: instantiate full slot struct.pk
////// (typeinst_args) lookahead_ctx=typedecl struct slot inst_type=slot args={{
                        struct.slot.name [domNode0x1a3cc80 @x-name]
                        struct.slot.type [domNode0x1a3cc80 @x-type]
                        struct.slot.parent struct
                        if { [domNode0x1a3cc80 hasAttribute "x-default_value"] } {
                            struct.slot.default_value [domNode0x1a3cc80 @x-default_value ""]
                        }
                        if { [domNode0x1a3cc80 hasAttribute "x-optional_p"] } {
                            struct.slot.optional_p [domNode0x1a3cc80 @x-optional_p ""]
                        }
                        if { [domNode0x1a3cc80 hasAttribute "x-container"] } {
                            struct.slot.container [domNode0x1a3cc80 @x-container ""]
                        }
                    }}
--->>> (typeinst_helper) inst_type=slot inst_name=pk context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl object struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=pk
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.name} {eval typeinst pk} {typeinst slot pk} {typedecl object typeinst} {typedecl object struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=varchar
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.type} {eval typeinst pk} {typeinst slot pk} {typedecl object typeinst} {typedecl object struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=struct
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.parent context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.parent} {eval typeinst pk} {typeinst slot pk} {typedecl object typeinst} {typedecl object struct}}
!!! nest: instantiate full slot struct.is_final_if_no_scope
////// (typeinst_args) lookahead_ctx=typedecl struct slot inst_type=slot args={{
                        struct.slot.name [domNode0x1a3cdc0 @x-name]
                        struct.slot.type [domNode0x1a3cdc0 @x-type]
                        struct.slot.parent struct
                        if { [domNode0x1a3cdc0 hasAttribute "x-default_value"] } {
                            struct.slot.default_value [domNode0x1a3cdc0 @x-default_value ""]
                        }
                        if { [domNode0x1a3cdc0 hasAttribute "x-optional_p"] } {
                            struct.slot.optional_p [domNode0x1a3cdc0 @x-optional_p ""]
                        }
                        if { [domNode0x1a3cdc0 hasAttribute "x-container"] } {
                            struct.slot.container [domNode0x1a3cdc0 @x-container ""]
                        }
                    }}
--->>> (typeinst_helper) inst_type=slot inst_name=is_final_if_no_scope context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl object struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=is_final_if_no_scope
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.name} {eval typeinst is_final_if_no_scope} {typeinst slot is_final_if_no_scope} {typedecl object typeinst} {typedecl object struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=bool
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.type} {eval typeinst is_final_if_no_scope} {typeinst slot is_final_if_no_scope} {typedecl object typeinst} {typedecl object struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=struct
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.parent context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.parent} {eval typeinst is_final_if_no_scope} {typeinst slot is_final_if_no_scope} {typedecl object typeinst} {typedecl object struct}}
--->>> (type_helper) varchar name {*}= {}
--->>> (typedecl_helper) context_path=email stack_ctx={{typedecl object typedecl} {typedecl base_type varchar} {eval struct email} {typedecl struct struct}}
--->>> (type_helper) varchar address {*}
--->>> (typedecl_helper) context_path=email stack_ctx={{typedecl object typedecl} {typedecl base_type varchar} {eval struct email} {typedecl struct struct}}
--->>> (unknown) pk address args= stack_ctx={{typedecl struct struct}}
--->>> (unknown) checking each context for "pk" -> struct.pk (1)
+++ pk address  -> redirect_name=struct.pk
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=address
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.pk context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.pk} {unknown unknown struct.pk} {eval struct email} {typedecl struct struct}}
!!! nest: email -> type_helper
!!! nest: instantiate empty slot email.name
--->>> (typeinst_helper) inst_type=slot inst_name=name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
!!! nest: instantiate empty slot email.address
--->>> (typeinst_helper) inst_type=slot inst_name=address context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
--->>> (unknown) type struct args= stack_ctx={{typedecl struct struct}}
--->>> (unknown) checking each context for "type" -> struct.type (1)
+++ type struct  -> redirect_name=struct.type
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=struct
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.type} {unknown unknown struct.type} {typedecl struct struct}}
--->>> (unknown) name email args= stack_ctx={{typedecl struct struct}}
--->>> (unknown) checking each context for "name" -> struct.name (1)
+++ name email  -> redirect_name=struct.name
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=email
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.name} {unknown unknown struct.name} {typedecl struct struct}}
--->>> (unknown) nsp ::nest::data args= stack_ctx={{typedecl struct struct}}
--->>> (unknown) checking each context for "nsp" -> struct.nsp (1)
+++ nsp ::nest::data  -> redirect_name=struct.nsp
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=::nest::data
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.nsp context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.nsp} {unknown unknown struct.nsp} {typedecl struct struct}}
!!! nest: instantiate full slot email.name
////// (typeinst_args) lookahead_ctx=typedecl struct slot inst_type=slot args={{
                        struct.slot.name [domNode0x1abba70 @x-name]
                        struct.slot.type [domNode0x1abba70 @x-type]
                        struct.slot.parent email
                        if { [domNode0x1abba70 hasAttribute "x-default_value"] } {
                            struct.slot.default_value [domNode0x1abba70 @x-default_value ""]
                        }
                        if { [domNode0x1abba70 hasAttribute "x-optional_p"] } {
                            struct.slot.optional_p [domNode0x1abba70 @x-optional_p ""]
                        }
                        if { [domNode0x1abba70 hasAttribute "x-container"] } {
                            struct.slot.container [domNode0x1abba70 @x-container ""]
                        }
                    }}
--->>> (typeinst_helper) inst_type=slot inst_name=name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=name
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.name} {eval typeinst name} {typeinst slot name} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=varchar
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.type} {eval typeinst name} {typeinst slot name} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=email
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.parent context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.parent} {eval typeinst name} {typeinst slot name} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args={{}}
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.default_value context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.default_value} {eval typeinst name} {typeinst slot name} {typedecl object typeinst} {typedecl struct struct}}
!!! nest: instantiate full slot email.address
////// (typeinst_args) lookahead_ctx=typedecl struct slot inst_type=slot args={{
                        struct.slot.name [domNode0x1abbc10 @x-name]
                        struct.slot.type [domNode0x1abbc10 @x-type]
                        struct.slot.parent email
                        if { [domNode0x1abbc10 hasAttribute "x-default_value"] } {
                            struct.slot.default_value [domNode0x1abbc10 @x-default_value ""]
                        }
                        if { [domNode0x1abbc10 hasAttribute "x-optional_p"] } {
                            struct.slot.optional_p [domNode0x1abbc10 @x-optional_p ""]
                        }
                        if { [domNode0x1abbc10 hasAttribute "x-container"] } {
                            struct.slot.container [domNode0x1abbc10 @x-container ""]
                        }
                    }}
--->>> (typeinst_helper) inst_type=slot inst_name=address context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=address
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.name} {eval typeinst address} {typeinst slot address} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=varchar
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.type} {eval typeinst address} {typeinst slot address} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=email
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.parent context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.parent} {eval typeinst address} {typeinst slot address} {typedecl object typeinst} {typedecl struct struct}}
--->>> (type_helper) varchar name {*}
--->>> (typedecl_helper) context_path=file stack_ctx={{typedecl object typedecl} {typedecl base_type varchar} {eval struct file} {typedecl struct struct}}
--->>> (type_helper) varchar mime_type {*}
--->>> (typedecl_helper) context_path=file stack_ctx={{typedecl object typedecl} {typedecl base_type varchar} {eval struct file} {typedecl struct struct}}
--->>> (type_helper) int32 size {*}
--->>> (typedecl_helper) context_path=file stack_ctx={{typedecl object typedecl} {typedecl base_type int32} {eval struct file} {typedecl struct struct}}
!!! nest: file -> type_helper
!!! nest: instantiate empty slot file.name
--->>> (typeinst_helper) inst_type=slot inst_name=name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
!!! nest: instantiate empty slot file.mime_type
--->>> (typeinst_helper) inst_type=slot inst_name=mime_type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
!!! nest: instantiate empty slot file.size
--->>> (typeinst_helper) inst_type=slot inst_name=size context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
--->>> (unknown) type struct args= stack_ctx={{typedecl struct struct}}
--->>> (unknown) checking each context for "type" -> struct.type (1)
+++ type struct  -> redirect_name=struct.type
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=struct
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.type} {unknown unknown struct.type} {typedecl struct struct}}
--->>> (unknown) name file args= stack_ctx={{typedecl struct struct}}
--->>> (unknown) checking each context for "name" -> struct.name (1)
+++ name file  -> redirect_name=struct.name
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=file
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.name} {unknown unknown struct.name} {typedecl struct struct}}
--->>> (unknown) nsp ::nest::data args= stack_ctx={{typedecl struct struct}}
--->>> (unknown) checking each context for "nsp" -> struct.nsp (1)
+++ nsp ::nest::data  -> redirect_name=struct.nsp
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=::nest::data
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.nsp context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.nsp} {unknown unknown struct.nsp} {typedecl struct struct}}
!!! nest: instantiate full slot file.name
////// (typeinst_args) lookahead_ctx=typedecl struct slot inst_type=slot args={{
                        struct.slot.name [domNode0x1ac1130 @x-name]
                        struct.slot.type [domNode0x1ac1130 @x-type]
                        struct.slot.parent file
                        if { [domNode0x1ac1130 hasAttribute "x-default_value"] } {
                            struct.slot.default_value [domNode0x1ac1130 @x-default_value ""]
                        }
                        if { [domNode0x1ac1130 hasAttribute "x-optional_p"] } {
                            struct.slot.optional_p [domNode0x1ac1130 @x-optional_p ""]
                        }
                        if { [domNode0x1ac1130 hasAttribute "x-container"] } {
                            struct.slot.container [domNode0x1ac1130 @x-container ""]
                        }
                    }}
--->>> (typeinst_helper) inst_type=slot inst_name=name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=name
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.name} {eval typeinst name} {typeinst slot name} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=varchar
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.type} {eval typeinst name} {typeinst slot name} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=file
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.parent context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.parent} {eval typeinst name} {typeinst slot name} {typedecl object typeinst} {typedecl struct struct}}
!!! nest: instantiate full slot file.mime_type
////// (typeinst_args) lookahead_ctx=typedecl struct slot inst_type=slot args={{
                        struct.slot.name [domNode0x1ac1270 @x-name]
                        struct.slot.type [domNode0x1ac1270 @x-type]
                        struct.slot.parent file
                        if { [domNode0x1ac1270 hasAttribute "x-default_value"] } {
                            struct.slot.default_value [domNode0x1ac1270 @x-default_value ""]
                        }
                        if { [domNode0x1ac1270 hasAttribute "x-optional_p"] } {
                            struct.slot.optional_p [domNode0x1ac1270 @x-optional_p ""]
                        }
                        if { [domNode0x1ac1270 hasAttribute "x-container"] } {
                            struct.slot.container [domNode0x1ac1270 @x-container ""]
                        }
                    }}
--->>> (typeinst_helper) inst_type=slot inst_name=mime_type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=mime_type
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.name} {eval typeinst mime_type} {typeinst slot mime_type} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=varchar
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.type} {eval typeinst mime_type} {typeinst slot mime_type} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=file
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.parent context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.parent} {eval typeinst mime_type} {typeinst slot mime_type} {typedecl object typeinst} {typedecl struct struct}}
!!! nest: instantiate full slot file.size
////// (typeinst_args) lookahead_ctx=typedecl struct slot inst_type=slot args={{
                        struct.slot.name [domNode0x1ac13b0 @x-name]
                        struct.slot.type [domNode0x1ac13b0 @x-type]
                        struct.slot.parent file
                        if { [domNode0x1ac13b0 hasAttribute "x-default_value"] } {
                            struct.slot.default_value [domNode0x1ac13b0 @x-default_value ""]
                        }
                        if { [domNode0x1ac13b0 hasAttribute "x-optional_p"] } {
                            struct.slot.optional_p [domNode0x1ac13b0 @x-optional_p ""]
                        }
                        if { [domNode0x1ac13b0 hasAttribute "x-container"] } {
                            struct.slot.container [domNode0x1ac13b0 @x-container ""]
                        }
                    }}
--->>> (typeinst_helper) inst_type=slot inst_name=size context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=size
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.name} {eval typeinst size} {typeinst slot size} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=int32
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.type} {eval typeinst size} {typeinst slot size} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=file
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.parent context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.parent} {eval typeinst size} {typeinst slot size} {typedecl object typeinst} {typedecl struct struct}}
--->>> (type_helper) varchar name {*}
--->>> (typedecl_helper) context_path=folder stack_ctx={{typedecl object typedecl} {typedecl base_type varchar} {eval struct folder} {typedecl struct struct}}
--->>> (type_helper) int32 num_items {*}
--->>> (typedecl_helper) context_path=folder stack_ctx={{typedecl object typedecl} {typedecl base_type int32} {eval struct folder} {typedecl struct struct}}
!!! nest: folder -> type_helper
!!! nest: instantiate empty slot folder.name
--->>> (typeinst_helper) inst_type=slot inst_name=name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
!!! nest: instantiate empty slot folder.num_items
--->>> (typeinst_helper) inst_type=slot inst_name=num_items context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
--->>> (unknown) type struct args= stack_ctx={{typedecl struct struct}}
--->>> (unknown) checking each context for "type" -> struct.type (1)
+++ type struct  -> redirect_name=struct.type
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=struct
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.type} {unknown unknown struct.type} {typedecl struct struct}}
--->>> (unknown) name folder args= stack_ctx={{typedecl struct struct}}
--->>> (unknown) checking each context for "name" -> struct.name (1)
+++ name folder  -> redirect_name=struct.name
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=folder
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.name} {unknown unknown struct.name} {typedecl struct struct}}
--->>> (unknown) nsp ::nest::data args= stack_ctx={{typedecl struct struct}}
--->>> (unknown) checking each context for "nsp" -> struct.nsp (1)
+++ nsp ::nest::data  -> redirect_name=struct.nsp
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=::nest::data
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.nsp context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.nsp} {unknown unknown struct.nsp} {typedecl struct struct}}
!!! nest: instantiate full slot folder.name
////// (typeinst_args) lookahead_ctx=typedecl struct slot inst_type=slot args={{
                        struct.slot.name [domNode0x1ac6ba0 @x-name]
                        struct.slot.type [domNode0x1ac6ba0 @x-type]
                        struct.slot.parent folder
                        if { [domNode0x1ac6ba0 hasAttribute "x-default_value"] } {
                            struct.slot.default_value [domNode0x1ac6ba0 @x-default_value ""]
                        }
                        if { [domNode0x1ac6ba0 hasAttribute "x-optional_p"] } {
                            struct.slot.optional_p [domNode0x1ac6ba0 @x-optional_p ""]
                        }
                        if { [domNode0x1ac6ba0 hasAttribute "x-container"] } {
                            struct.slot.container [domNode0x1ac6ba0 @x-container ""]
                        }
                    }}
--->>> (typeinst_helper) inst_type=slot inst_name=name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=name
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.name} {eval typeinst name} {typeinst slot name} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=varchar
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.type} {eval typeinst name} {typeinst slot name} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=folder
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.parent context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.parent} {eval typeinst name} {typeinst slot name} {typedecl object typeinst} {typedecl struct struct}}
!!! nest: instantiate full slot folder.num_items
////// (typeinst_args) lookahead_ctx=typedecl struct slot inst_type=slot args={{
                        struct.slot.name [domNode0x1ac6ce0 @x-name]
                        struct.slot.type [domNode0x1ac6ce0 @x-type]
                        struct.slot.parent folder
                        if { [domNode0x1ac6ce0 hasAttribute "x-default_value"] } {
                            struct.slot.default_value [domNode0x1ac6ce0 @x-default_value ""]
                        }
                        if { [domNode0x1ac6ce0 hasAttribute "x-optional_p"] } {
                            struct.slot.optional_p [domNode0x1ac6ce0 @x-optional_p ""]
                        }
                        if { [domNode0x1ac6ce0 hasAttribute "x-container"] } {
                            struct.slot.container [domNode0x1ac6ce0 @x-container ""]
                        }
                    }}
--->>> (typeinst_helper) inst_type=slot inst_name=num_items context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=num_items
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.name} {eval typeinst num_items} {typeinst slot num_items} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=int32
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.type} {eval typeinst num_items} {typeinst slot num_items} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=folder
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.parent context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.parent} {eval typeinst num_items} {typeinst slot num_items} {typedecl object typeinst} {typedecl struct struct}}
--->>> (type_helper) varchar category_name {*}
--->>> (typedecl_helper) context_path=category stack_ctx={{typedecl object typedecl} {typedecl base_type varchar} {eval struct category} {typedecl struct struct}}
--->>> (type_helper) varchar parent_category {*}
--->>> (typedecl_helper) context_path=category stack_ctx={{typedecl object typedecl} {typedecl base_type varchar} {eval struct category} {typedecl struct struct}}
!!! nest: category -> type_helper
!!! nest: instantiate empty slot category.category_name
--->>> (typeinst_helper) inst_type=slot inst_name=category_name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
!!! nest: instantiate empty slot category.parent_category
--->>> (typeinst_helper) inst_type=slot inst_name=parent_category context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
--->>> (unknown) type struct args= stack_ctx={{typedecl struct struct}}
--->>> (unknown) checking each context for "type" -> struct.type (1)
+++ type struct  -> redirect_name=struct.type
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=struct
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.type} {unknown unknown struct.type} {typedecl struct struct}}
--->>> (unknown) name category args= stack_ctx={{typedecl struct struct}}
--->>> (unknown) checking each context for "name" -> struct.name (1)
+++ name category  -> redirect_name=struct.name
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=category
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.name} {unknown unknown struct.name} {typedecl struct struct}}
--->>> (unknown) nsp ::nest::data args= stack_ctx={{typedecl struct struct}}
--->>> (unknown) checking each context for "nsp" -> struct.nsp (1)
+++ nsp ::nest::data  -> redirect_name=struct.nsp
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=::nest::data
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.nsp context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.nsp} {unknown unknown struct.nsp} {typedecl struct struct}}
!!! nest: instantiate full slot category.category_name
////// (typeinst_args) lookahead_ctx=typedecl struct slot inst_type=slot args={{
                        struct.slot.name [domNode0x1ac7f20 @x-name]
                        struct.slot.type [domNode0x1ac7f20 @x-type]
                        struct.slot.parent category
                        if { [domNode0x1ac7f20 hasAttribute "x-default_value"] } {
                            struct.slot.default_value [domNode0x1ac7f20 @x-default_value ""]
                        }
                        if { [domNode0x1ac7f20 hasAttribute "x-optional_p"] } {
                            struct.slot.optional_p [domNode0x1ac7f20 @x-optional_p ""]
                        }
                        if { [domNode0x1ac7f20 hasAttribute "x-container"] } {
                            struct.slot.container [domNode0x1ac7f20 @x-container ""]
                        }
                    }}
--->>> (typeinst_helper) inst_type=slot inst_name=category_name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=category_name
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.name} {eval typeinst category_name} {typeinst slot category_name} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=varchar
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.type} {eval typeinst category_name} {typeinst slot category_name} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=category
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.parent context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.parent} {eval typeinst category_name} {typeinst slot category_name} {typedecl object typeinst} {typedecl struct struct}}
!!! nest: instantiate full slot category.parent_category
////// (typeinst_args) lookahead_ctx=typedecl struct slot inst_type=slot args={{
                        struct.slot.name [domNode0x1ac8060 @x-name]
                        struct.slot.type [domNode0x1ac8060 @x-type]
                        struct.slot.parent category
                        if { [domNode0x1ac8060 hasAttribute "x-default_value"] } {
                            struct.slot.default_value [domNode0x1ac8060 @x-default_value ""]
                        }
                        if { [domNode0x1ac8060 hasAttribute "x-optional_p"] } {
                            struct.slot.optional_p [domNode0x1ac8060 @x-optional_p ""]
                        }
                        if { [domNode0x1ac8060 hasAttribute "x-container"] } {
                            struct.slot.container [domNode0x1ac8060 @x-container ""]
                        }
                    }}
--->>> (typeinst_helper) inst_type=slot inst_name=parent_category context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=parent_category
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.name} {eval typeinst parent_category} {typeinst slot parent_category} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=varchar
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.type} {eval typeinst parent_category} {typeinst slot parent_category} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=category
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.parent context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.parent} {eval typeinst parent_category} {typeinst slot parent_category} {typedecl object typeinst} {typedecl struct struct}}
--->>> (type_helper) varchar word {*}
--->>> (typedecl_helper) context_path=word_count_pair stack_ctx={{typedecl object typedecl} {typedecl base_type varchar} {eval struct word_count_pair} {typedecl struct struct}}
--->>> (type_helper) varint count {*}
--->>> (typedecl_helper) context_path=word_count_pair stack_ctx={{typedecl object typedecl} {typedecl base_type varint} {eval struct word_count_pair} {typedecl struct struct}}
!!! nest: word_count_pair -> type_helper
!!! nest: instantiate empty slot word_count_pair.word
--->>> (typeinst_helper) inst_type=slot inst_name=word context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
!!! nest: instantiate empty slot word_count_pair.count
--->>> (typeinst_helper) inst_type=slot inst_name=count context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
--->>> (unknown) type struct args= stack_ctx={{typedecl struct struct}}
--->>> (unknown) checking each context for "type" -> struct.type (1)
+++ type struct  -> redirect_name=struct.type
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=struct
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.type} {unknown unknown struct.type} {typedecl struct struct}}
--->>> (unknown) name word_count_pair args= stack_ctx={{typedecl struct struct}}
--->>> (unknown) checking each context for "name" -> struct.name (1)
+++ name word_count_pair  -> redirect_name=struct.name
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=word_count_pair
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.name} {unknown unknown struct.name} {typedecl struct struct}}
--->>> (unknown) nsp ::nest::data args= stack_ctx={{typedecl struct struct}}
--->>> (unknown) checking each context for "nsp" -> struct.nsp (1)
+++ nsp ::nest::data  -> redirect_name=struct.nsp
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=::nest::data
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.nsp context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.nsp} {unknown unknown struct.nsp} {typedecl struct struct}}
!!! nest: instantiate full slot word_count_pair.word
////// (typeinst_args) lookahead_ctx=typedecl struct slot inst_type=slot args={{
                        struct.slot.name [domNode0x1acd2b0 @x-name]
                        struct.slot.type [domNode0x1acd2b0 @x-type]
                        struct.slot.parent word_count_pair
                        if { [domNode0x1acd2b0 hasAttribute "x-default_value"] } {
                            struct.slot.default_value [domNode0x1acd2b0 @x-default_value ""]
                        }
                        if { [domNode0x1acd2b0 hasAttribute "x-optional_p"] } {
                            struct.slot.optional_p [domNode0x1acd2b0 @x-optional_p ""]
                        }
                        if { [domNode0x1acd2b0 hasAttribute "x-container"] } {
                            struct.slot.container [domNode0x1acd2b0 @x-container ""]
                        }
                    }}
--->>> (typeinst_helper) inst_type=slot inst_name=word context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=word
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.name} {eval typeinst word} {typeinst slot word} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=varchar
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.type} {eval typeinst word} {typeinst slot word} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=word_count_pair
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.parent context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.parent} {eval typeinst word} {typeinst slot word} {typedecl object typeinst} {typedecl struct struct}}
!!! nest: instantiate full slot word_count_pair.count
////// (typeinst_args) lookahead_ctx=typedecl struct slot inst_type=slot args={{
                        struct.slot.name [domNode0x1acd3f0 @x-name]
                        struct.slot.type [domNode0x1acd3f0 @x-type]
                        struct.slot.parent word_count_pair
                        if { [domNode0x1acd3f0 hasAttribute "x-default_value"] } {
                            struct.slot.default_value [domNode0x1acd3f0 @x-default_value ""]
                        }
                        if { [domNode0x1acd3f0 hasAttribute "x-optional_p"] } {
                            struct.slot.optional_p [domNode0x1acd3f0 @x-optional_p ""]
                        }
                        if { [domNode0x1acd3f0 hasAttribute "x-container"] } {
                            struct.slot.container [domNode0x1acd3f0 @x-container ""]
                        }
                    }}
--->>> (typeinst_helper) inst_type=slot inst_name=count context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=count
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.name} {eval typeinst count} {typeinst slot count} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=varint
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.type} {eval typeinst count} {typeinst slot count} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=word_count_pair
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.parent context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.parent} {eval typeinst count} {typeinst slot count} {typedecl object typeinst} {typedecl struct struct}}
--->>> (unknown) pk message_id args= stack_ctx={{typedecl struct struct}}
--->>> (unknown) checking each context for "pk" -> struct.pk (1)
+++ pk message_id  -> redirect_name=struct.pk
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=message_id
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.pk context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.pk} {unknown unknown struct.pk} {eval struct message} {typedecl struct struct}}
--->>> (unknown) is_final_if_no_scope yes args= stack_ctx={{typedecl struct struct}}
--->>> (unknown) checking each context for "is_final_if_no_scope" -> struct.is_final_if_no_scope (1)
+++ is_final_if_no_scope yes  -> redirect_name=struct.is_final_if_no_scope
////// (typeinst_args) lookahead_ctx=typedecl base_type bool inst_type=bool args=yes
--->>> (typeinst_helper) inst_type=bool inst_name=struct.is_final_if_no_scope context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl bool struct.is_final_if_no_scope} {unknown unknown struct.is_final_if_no_scope} {eval struct message} {typedecl struct struct}}
--->>> (type_helper) varint message_id {*}
--->>> (typedecl_helper) context_path=message stack_ctx={{typedecl object typedecl} {typedecl base_type varint} {eval struct message} {typedecl struct struct}}
--->>> (type_helper) varchar device {*}= sms
--->>> (typedecl_helper) context_path=message stack_ctx={{typedecl object typedecl} {typedecl base_type varchar} {eval struct message} {typedecl struct struct}}
--->>> (type_helper) int16 num_comments {*}= 0
--->>> (typedecl_helper) context_path=message stack_ctx={{typedecl object typedecl} {typedecl base_type int16} {eval struct message} {typedecl struct struct}}
--->>> (type_helper) varchar subject {*}
--->>> (typedecl_helper) context_path=message stack_ctx={{typedecl object typedecl} {typedecl base_type varchar} {eval struct message} {typedecl struct struct}}
--->>> (type_helper) varchar body {*}
--->>> (typedecl_helper) context_path=message stack_ctx={{typedecl object typedecl} {typedecl base_type varchar} {eval struct message} {typedecl struct struct}}
--->>> (type_helper) email from {*}
--->>> (typedecl_helper) context_path=message stack_ctx={{typedecl object typedecl} {typedecl struct email} {eval struct message} {typedecl struct struct}}
@@@@ (container_helper) llength_args=1 instantiation_p=1
----- (container instantiation) name=email args=to
--->>> (type_helper) email to {*}
--->>> (typedecl_helper) context_path=message stack_ctx={{typedecl object typedecl} {typedecl struct email} {eval struct message} {typedecl struct struct}}
@@@@ (container_helper) llength_args=3 instantiation_p=0
++++++ (container declaration) tag=type=email name=cc args== {} stack_ctx={eval struct message} {typedecl struct struct} context=eval struct message
--->>> (type_helper) email cc {*}-x-container multiple -x-default_value {}
--->>> (typedecl_helper) context_path=message stack_ctx={{typedecl object typedecl} {typedecl struct email} {eval struct message} {typedecl struct struct}}
llength_args=3 args=-x-container multiple -x-default_value {} cmd=email cc -x-container multiple -x-default_value {}
@@@@ (container_helper) llength_args=3 instantiation_p=0
++++++ (container declaration) tag=type=email name=bcc args== {} stack_ctx={eval struct message} {typedecl struct struct} context=eval struct message
--->>> (type_helper) email bcc {*}-x-container multiple -x-default_value {}
--->>> (typedecl_helper) context_path=message stack_ctx={{typedecl object typedecl} {typedecl struct email} {eval struct message} {typedecl struct struct}}
llength_args=3 args=-x-container multiple -x-default_value {} cmd=email bcc -x-container multiple -x-default_value {}
--->>> (type_helper) bool public_p {*}= false
--->>> (typedecl_helper) context_path=message stack_ctx={{typedecl object typedecl} {typedecl base_type bool} {eval struct message} {typedecl struct struct}}
@@@@ (container_helper) llength_args=3 instantiation_p=0
++++++ (container declaration) tag=type=category name=categories args== {} stack_ctx={eval struct message} {typedecl struct struct} context=eval struct message
--->>> (type_helper) category categories {*}-x-container multiple -x-default_value {}
--->>> (typedecl_helper) context_path=message stack_ctx={{typedecl object typedecl} {typedecl struct category} {eval struct message} {typedecl struct struct}}
llength_args=3 args=-x-container multiple -x-default_value {} cmd=category categories -x-container multiple -x-default_value {}
@@@@ (container_helper) llength_args=3 instantiation_p=0
++++++ (container declaration) tag=type=folder name=folders args== {} stack_ctx={eval struct message} {typedecl struct struct} context=eval struct message
--->>> (type_helper) folder folders {*}-x-container multiple -x-default_value {}
--->>> (typedecl_helper) context_path=message stack_ctx={{typedecl object typedecl} {typedecl struct folder} {eval struct message} {typedecl struct struct}}
llength_args=3 args=-x-container multiple -x-default_value {} cmd=folder folders -x-container multiple -x-default_value {}
@@@@ (container_helper) llength_args=3 instantiation_p=0
++++++ (container declaration) tag=type=varchar name=tags args== {} stack_ctx={eval struct message} {typedecl struct struct} context=eval struct message
--->>> (type_helper) varchar tags {*}-x-container multiple -x-default_value {}
--->>> (typedecl_helper) context_path=message stack_ctx={{typedecl object typedecl} {typedecl base_type varchar} {eval struct message} {typedecl struct struct}}
llength_args=3 args=-x-container multiple -x-default_value {} cmd=varchar tags -x-container multiple -x-default_value {}
@@@@ (container_helper) llength_args=3 instantiation_p=0
++++++ (container declaration) tag=type=file name=attachment args== {} stack_ctx={eval struct message} {typedecl struct struct} context=eval struct message
--->>> (type_helper) file attachment {*}-x-container multiple -x-default_value {}
--->>> (typedecl_helper) context_path=message stack_ctx={{typedecl object typedecl} {typedecl struct file} {eval struct message} {typedecl struct struct}}
llength_args=3 args=-x-container multiple -x-default_value {} cmd=file attachment -x-container multiple -x-default_value {}
@@@@ (container_helper) llength_args=4 instantiation_p=0
++++++ (container declaration) tag=type=struct name=wordcount_X args== {} {
        varchar word
        int32 count
    } stack_ctx={eval struct message} {typedecl struct struct} context=eval struct message
--->>> (type_helper) varchar word {*}
--->>> (typedecl_helper) context_path=message.wordcount_X stack_ctx={{typedecl object typedecl} {typedecl base_type varchar} {eval struct wordcount_X} {typedecl struct struct} {eval struct message} {typedecl struct struct}}
--->>> (type_helper) int32 count {*}
--->>> (typedecl_helper) context_path=message.wordcount_X stack_ctx={{typedecl object typedecl} {typedecl base_type int32} {eval struct wordcount_X} {typedecl struct struct} {eval struct message} {typedecl struct struct}}
!!! nest: wordcount_X -> type_helper
!!! nest: instantiate empty slot wordcount_X.word
--->>> (typeinst_helper) inst_type=slot inst_name=word context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct} {eval struct message} {typedecl struct struct}}
!!! nest: instantiate empty slot wordcount_X.count
--->>> (typeinst_helper) inst_type=slot inst_name=count context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct} {eval struct message} {typedecl struct struct}}
--->>> (unknown) type struct args= stack_ctx={{typedecl struct struct} {typedecl struct struct}}
--->>> (unknown) checking each context for "type" -> struct.type (1)
+++ type struct  -> redirect_name=struct.type
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=struct
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.type} {unknown unknown struct.type} {typedecl struct struct} {eval struct message} {typedecl struct struct}}
--->>> (unknown) name wordcount_X args= stack_ctx={{typedecl struct struct} {typedecl struct struct}}
--->>> (unknown) checking each context for "name" -> struct.name (1)
+++ name wordcount_X  -> redirect_name=struct.name
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=wordcount_X
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.name} {unknown unknown struct.name} {typedecl struct struct} {eval struct message} {typedecl struct struct}}
--->>> (unknown) nsp ::nest::lang args= stack_ctx={{typedecl struct struct} {typedecl struct struct}}
--->>> (unknown) checking each context for "nsp" -> struct.nsp (1)
+++ nsp ::nest::lang  -> redirect_name=struct.nsp
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=::nest::lang
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.nsp context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.nsp} {unknown unknown struct.nsp} {typedecl struct struct} {eval struct message} {typedecl struct struct}}
!!! nest: instantiate full slot wordcount_X.word
////// (typeinst_args) lookahead_ctx=typedecl struct slot inst_type=slot args={{
                        struct.slot.name [domNode0x1ad8280 @x-name]
                        struct.slot.type [domNode0x1ad8280 @x-type]
                        struct.slot.parent wordcount_X
                        if { [domNode0x1ad8280 hasAttribute "x-default_value"] } {
                            struct.slot.default_value [domNode0x1ad8280 @x-default_value ""]
                        }
                        if { [domNode0x1ad8280 hasAttribute "x-optional_p"] } {
                            struct.slot.optional_p [domNode0x1ad8280 @x-optional_p ""]
                        }
                        if { [domNode0x1ad8280 hasAttribute "x-container"] } {
                            struct.slot.container [domNode0x1ad8280 @x-container ""]
                        }
                    }}
--->>> (typeinst_helper) inst_type=slot inst_name=word context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct} {eval struct message} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=word
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.name} {eval typeinst word} {typeinst slot word} {typedecl object typeinst} {typedecl struct struct} {eval struct message} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=varchar
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.type} {eval typeinst word} {typeinst slot word} {typedecl object typeinst} {typedecl struct struct} {eval struct message} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=wordcount_X
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.parent context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.parent} {eval typeinst word} {typeinst slot word} {typedecl object typeinst} {typedecl struct struct} {eval struct message} {typedecl struct struct}}
!!! nest: instantiate full slot wordcount_X.count
////// (typeinst_args) lookahead_ctx=typedecl struct slot inst_type=slot args={{
                        struct.slot.name [domNode0x1ad83c0 @x-name]
                        struct.slot.type [domNode0x1ad83c0 @x-type]
                        struct.slot.parent wordcount_X
                        if { [domNode0x1ad83c0 hasAttribute "x-default_value"] } {
                            struct.slot.default_value [domNode0x1ad83c0 @x-default_value ""]
                        }
                        if { [domNode0x1ad83c0 hasAttribute "x-optional_p"] } {
                            struct.slot.optional_p [domNode0x1ad83c0 @x-optional_p ""]
                        }
                        if { [domNode0x1ad83c0 hasAttribute "x-container"] } {
                            struct.slot.container [domNode0x1ad83c0 @x-container ""]
                        }
                    }}
--->>> (typeinst_helper) inst_type=slot inst_name=count context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct} {eval struct message} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=count
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.name} {eval typeinst count} {typeinst slot count} {typedecl object typeinst} {typedecl struct struct} {eval struct message} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=int32
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.type} {eval typeinst count} {typeinst slot count} {typedecl object typeinst} {typedecl struct struct} {eval struct message} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=wordcount_X
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.parent context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.parent} {eval typeinst count} {typeinst slot count} {typedecl object typeinst} {typedecl struct struct} {eval struct message} {typedecl struct struct}}
llength_args=4 args=-x-container map -x-default_value {} {
        varchar word
        int32 count
    } cmd=struct wordcount_X -x-container map -x-default_value {} {
        varchar word
        int32 count
    }
@@@@ (container_helper) llength_args=1 instantiation_p=1
----- (container instantiation) name=word_count_pair args=wordcount_Y
--->>> (type_helper) word_count_pair wordcount_Y {*}
--->>> (typedecl_helper) context_path=message stack_ctx={{typedecl object typedecl} {typedecl struct word_count_pair} {eval struct message} {typedecl struct struct}}
@@@@ (container_helper) llength_args=3 instantiation_p=0
++++++ (container declaration) tag=type=word_count_pair name=wordcount_Z args== {} stack_ctx={eval struct message} {typedecl struct struct} context=eval struct message
--->>> (type_helper) word_count_pair wordcount_Z {*}-x-container map -x-default_value {}
--->>> (typedecl_helper) context_path=message stack_ctx={{typedecl object typedecl} {typedecl struct word_count_pair} {eval struct message} {typedecl struct struct}}
llength_args=3 args=-x-container map -x-default_value {} cmd=word_count_pair wordcount_Z -x-container map -x-default_value {}
@@@@ (container_helper) llength_args=1 instantiation_p=1
----- (container instantiation) name=varchar args=words
--->>> (type_helper) varchar words {*}
--->>> (typedecl_helper) context_path=message stack_ctx={{typedecl object typedecl} {typedecl base_type varchar} {eval struct message} {typedecl struct struct}}
!!! nest: message -> type_helper
!!! nest: instantiate empty slot message.message_id
--->>> (typeinst_helper) inst_type=slot inst_name=message_id context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
!!! nest: instantiate empty slot message.device
--->>> (typeinst_helper) inst_type=slot inst_name=device context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
!!! nest: instantiate empty slot message.num_comments
--->>> (typeinst_helper) inst_type=slot inst_name=num_comments context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
!!! nest: instantiate empty slot message.subject
--->>> (typeinst_helper) inst_type=slot inst_name=subject context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
!!! nest: instantiate empty slot message.body
--->>> (typeinst_helper) inst_type=slot inst_name=body context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
!!! nest: instantiate empty slot message.from
--->>> (typeinst_helper) inst_type=slot inst_name=from context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
!!! nest: instantiate empty slot message.to
--->>> (typeinst_helper) inst_type=slot inst_name=to context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
!!! nest: instantiate empty slot message.cc
--->>> (typeinst_helper) inst_type=slot inst_name=cc context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
!!! nest: instantiate empty slot message.bcc
--->>> (typeinst_helper) inst_type=slot inst_name=bcc context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
!!! nest: instantiate empty slot message.public_p
--->>> (typeinst_helper) inst_type=slot inst_name=public_p context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
!!! nest: instantiate empty slot message.categories
--->>> (typeinst_helper) inst_type=slot inst_name=categories context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
!!! nest: instantiate empty slot message.folders
--->>> (typeinst_helper) inst_type=slot inst_name=folders context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
!!! nest: instantiate empty slot message.tags
--->>> (typeinst_helper) inst_type=slot inst_name=tags context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
!!! nest: instantiate empty slot message.attachment
--->>> (typeinst_helper) inst_type=slot inst_name=attachment context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
!!! nest: instantiate empty slot message.wordcount_Y
--->>> (typeinst_helper) inst_type=slot inst_name=wordcount_Y context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
!!! nest: instantiate empty slot message.wordcount_Z
--->>> (typeinst_helper) inst_type=slot inst_name=wordcount_Z context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
!!! nest: instantiate empty slot message.words
--->>> (typeinst_helper) inst_type=slot inst_name=words context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
--->>> (unknown) type struct args= stack_ctx={{typedecl struct struct}}
--->>> (unknown) checking each context for "type" -> struct.type (1)
+++ type struct  -> redirect_name=struct.type
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=struct
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.type} {unknown unknown struct.type} {typedecl struct struct}}
--->>> (unknown) name message args= stack_ctx={{typedecl struct struct}}
--->>> (unknown) checking each context for "name" -> struct.name (1)
+++ name message  -> redirect_name=struct.name
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=message
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.name} {unknown unknown struct.name} {typedecl struct struct}}
--->>> (unknown) nsp ::nest::data args= stack_ctx={{typedecl struct struct}}
--->>> (unknown) checking each context for "nsp" -> struct.nsp (1)
+++ nsp ::nest::data  -> redirect_name=struct.nsp
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=::nest::data
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.nsp context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.nsp} {unknown unknown struct.nsp} {typedecl struct struct}}
!!! nest: instantiate full slot message.message_id
////// (typeinst_args) lookahead_ctx=typedecl struct slot inst_type=slot args={{
                        struct.slot.name [domNode0x1ace940 @x-name]
                        struct.slot.type [domNode0x1ace940 @x-type]
                        struct.slot.parent message
                        if { [domNode0x1ace940 hasAttribute "x-default_value"] } {
                            struct.slot.default_value [domNode0x1ace940 @x-default_value ""]
                        }
                        if { [domNode0x1ace940 hasAttribute "x-optional_p"] } {
                            struct.slot.optional_p [domNode0x1ace940 @x-optional_p ""]
                        }
                        if { [domNode0x1ace940 hasAttribute "x-container"] } {
                            struct.slot.container [domNode0x1ace940 @x-container ""]
                        }
                    }}
--->>> (typeinst_helper) inst_type=slot inst_name=message_id context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=message_id
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.name} {eval typeinst message_id} {typeinst slot message_id} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=varint
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.type} {eval typeinst message_id} {typeinst slot message_id} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=message
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.parent context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.parent} {eval typeinst message_id} {typeinst slot message_id} {typedecl object typeinst} {typedecl struct struct}}
!!! nest: instantiate full slot message.device
////// (typeinst_args) lookahead_ctx=typedecl struct slot inst_type=slot args={{
                        struct.slot.name [domNode0x1acea80 @x-name]
                        struct.slot.type [domNode0x1acea80 @x-type]
                        struct.slot.parent message
                        if { [domNode0x1acea80 hasAttribute "x-default_value"] } {
                            struct.slot.default_value [domNode0x1acea80 @x-default_value ""]
                        }
                        if { [domNode0x1acea80 hasAttribute "x-optional_p"] } {
                            struct.slot.optional_p [domNode0x1acea80 @x-optional_p ""]
                        }
                        if { [domNode0x1acea80 hasAttribute "x-container"] } {
                            struct.slot.container [domNode0x1acea80 @x-container ""]
                        }
                    }}
--->>> (typeinst_helper) inst_type=slot inst_name=device context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=device
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.name} {eval typeinst device} {typeinst slot device} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=varchar
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.type} {eval typeinst device} {typeinst slot device} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=message
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.parent context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.parent} {eval typeinst device} {typeinst slot device} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=sms
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.default_value context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.default_value} {eval typeinst device} {typeinst slot device} {typedecl object typeinst} {typedecl struct struct}}
!!! nest: instantiate full slot message.num_comments
////// (typeinst_args) lookahead_ctx=typedecl struct slot inst_type=slot args={{
                        struct.slot.name [domNode0x1acec20 @x-name]
                        struct.slot.type [domNode0x1acec20 @x-type]
                        struct.slot.parent message
                        if { [domNode0x1acec20 hasAttribute "x-default_value"] } {
                            struct.slot.default_value [domNode0x1acec20 @x-default_value ""]
                        }
                        if { [domNode0x1acec20 hasAttribute "x-optional_p"] } {
                            struct.slot.optional_p [domNode0x1acec20 @x-optional_p ""]
                        }
                        if { [domNode0x1acec20 hasAttribute "x-container"] } {
                            struct.slot.container [domNode0x1acec20 @x-container ""]
                        }
                    }}
--->>> (typeinst_helper) inst_type=slot inst_name=num_comments context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=num_comments
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.name} {eval typeinst num_comments} {typeinst slot num_comments} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=int16
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.type} {eval typeinst num_comments} {typeinst slot num_comments} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=message
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.parent context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.parent} {eval typeinst num_comments} {typeinst slot num_comments} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=0
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.default_value context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.default_value} {eval typeinst num_comments} {typeinst slot num_comments} {typedecl object typeinst} {typedecl struct struct}}
!!! nest: instantiate full slot message.subject
////// (typeinst_args) lookahead_ctx=typedecl struct slot inst_type=slot args={{
                        struct.slot.name [domNode0x1acedc0 @x-name]
                        struct.slot.type [domNode0x1acedc0 @x-type]
                        struct.slot.parent message
                        if { [domNode0x1acedc0 hasAttribute "x-default_value"] } {
                            struct.slot.default_value [domNode0x1acedc0 @x-default_value ""]
                        }
                        if { [domNode0x1acedc0 hasAttribute "x-optional_p"] } {
                            struct.slot.optional_p [domNode0x1acedc0 @x-optional_p ""]
                        }
                        if { [domNode0x1acedc0 hasAttribute "x-container"] } {
                            struct.slot.container [domNode0x1acedc0 @x-container ""]
                        }
                    }}
--->>> (typeinst_helper) inst_type=slot inst_name=subject context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=subject
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.name} {eval typeinst subject} {typeinst slot subject} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=varchar
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.type} {eval typeinst subject} {typeinst slot subject} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=message
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.parent context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.parent} {eval typeinst subject} {typeinst slot subject} {typedecl object typeinst} {typedecl struct struct}}
!!! nest: instantiate full slot message.body
////// (typeinst_args) lookahead_ctx=typedecl struct slot inst_type=slot args={{
                        struct.slot.name [domNode0x1acef00 @x-name]
                        struct.slot.type [domNode0x1acef00 @x-type]
                        struct.slot.parent message
                        if { [domNode0x1acef00 hasAttribute "x-default_value"] } {
                            struct.slot.default_value [domNode0x1acef00 @x-default_value ""]
                        }
                        if { [domNode0x1acef00 hasAttribute "x-optional_p"] } {
                            struct.slot.optional_p [domNode0x1acef00 @x-optional_p ""]
                        }
                        if { [domNode0x1acef00 hasAttribute "x-container"] } {
                            struct.slot.container [domNode0x1acef00 @x-container ""]
                        }
                    }}
--->>> (typeinst_helper) inst_type=slot inst_name=body context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=body
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.name} {eval typeinst body} {typeinst slot body} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=varchar
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.type} {eval typeinst body} {typeinst slot body} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=message
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.parent context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.parent} {eval typeinst body} {typeinst slot body} {typedecl object typeinst} {typedecl struct struct}}
!!! nest: instantiate full slot message.from
////// (typeinst_args) lookahead_ctx=typedecl struct slot inst_type=slot args={{
                        struct.slot.name [domNode0x1acf040 @x-name]
                        struct.slot.type [domNode0x1acf040 @x-type]
                        struct.slot.parent message
                        if { [domNode0x1acf040 hasAttribute "x-default_value"] } {
                            struct.slot.default_value [domNode0x1acf040 @x-default_value ""]
                        }
                        if { [domNode0x1acf040 hasAttribute "x-optional_p"] } {
                            struct.slot.optional_p [domNode0x1acf040 @x-optional_p ""]
                        }
                        if { [domNode0x1acf040 hasAttribute "x-container"] } {
                            struct.slot.container [domNode0x1acf040 @x-container ""]
                        }
                    }}
--->>> (typeinst_helper) inst_type=slot inst_name=from context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=from
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.name} {eval typeinst from} {typeinst slot from} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=email
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.type} {eval typeinst from} {typeinst slot from} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=message
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.parent context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.parent} {eval typeinst from} {typeinst slot from} {typedecl object typeinst} {typedecl struct struct}}
!!! nest: instantiate full slot message.to
////// (typeinst_args) lookahead_ctx=typedecl struct slot inst_type=slot args={{
                        struct.slot.name [domNode0x1ad71a0 @x-name]
                        struct.slot.type [domNode0x1ad71a0 @x-type]
                        struct.slot.parent message
                        if { [domNode0x1ad71a0 hasAttribute "x-default_value"] } {
                            struct.slot.default_value [domNode0x1ad71a0 @x-default_value ""]
                        }
                        if { [domNode0x1ad71a0 hasAttribute "x-optional_p"] } {
                            struct.slot.optional_p [domNode0x1ad71a0 @x-optional_p ""]
                        }
                        if { [domNode0x1ad71a0 hasAttribute "x-container"] } {
                            struct.slot.container [domNode0x1ad71a0 @x-container ""]
                        }
                    }}
--->>> (typeinst_helper) inst_type=slot inst_name=to context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=to
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.name} {eval typeinst to} {typeinst slot to} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=email
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.type} {eval typeinst to} {typeinst slot to} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=message
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.parent context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.parent} {eval typeinst to} {typeinst slot to} {typedecl object typeinst} {typedecl struct struct}}
!!! nest: instantiate full slot message.cc
////// (typeinst_args) lookahead_ctx=typedecl struct slot inst_type=slot args={{
                        struct.slot.name [domNode0x1ad72e0 @x-name]
                        struct.slot.type [domNode0x1ad72e0 @x-type]
                        struct.slot.parent message
                        if { [domNode0x1ad72e0 hasAttribute "x-default_value"] } {
                            struct.slot.default_value [domNode0x1ad72e0 @x-default_value ""]
                        }
                        if { [domNode0x1ad72e0 hasAttribute "x-optional_p"] } {
                            struct.slot.optional_p [domNode0x1ad72e0 @x-optional_p ""]
                        }
                        if { [domNode0x1ad72e0 hasAttribute "x-container"] } {
                            struct.slot.container [domNode0x1ad72e0 @x-container ""]
                        }
                    }}
--->>> (typeinst_helper) inst_type=slot inst_name=cc context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=cc
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.name} {eval typeinst cc} {typeinst slot cc} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=email
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.type} {eval typeinst cc} {typeinst slot cc} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=message
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.parent context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.parent} {eval typeinst cc} {typeinst slot cc} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args={{}}
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.default_value context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.default_value} {eval typeinst cc} {typeinst slot cc} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=multiple
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.container context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.container} {eval typeinst cc} {typeinst slot cc} {typedecl object typeinst} {typedecl struct struct}}
!!! nest: instantiate full slot message.bcc
////// (typeinst_args) lookahead_ctx=typedecl struct slot inst_type=slot args={{
                        struct.slot.name [domNode0x1ad74e0 @x-name]
                        struct.slot.type [domNode0x1ad74e0 @x-type]
                        struct.slot.parent message
                        if { [domNode0x1ad74e0 hasAttribute "x-default_value"] } {
                            struct.slot.default_value [domNode0x1ad74e0 @x-default_value ""]
                        }
                        if { [domNode0x1ad74e0 hasAttribute "x-optional_p"] } {
                            struct.slot.optional_p [domNode0x1ad74e0 @x-optional_p ""]
                        }
                        if { [domNode0x1ad74e0 hasAttribute "x-container"] } {
                            struct.slot.container [domNode0x1ad74e0 @x-container ""]
                        }
                    }}
--->>> (typeinst_helper) inst_type=slot inst_name=bcc context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=bcc
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.name} {eval typeinst bcc} {typeinst slot bcc} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=email
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.type} {eval typeinst bcc} {typeinst slot bcc} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=message
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.parent context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.parent} {eval typeinst bcc} {typeinst slot bcc} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args={{}}
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.default_value context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.default_value} {eval typeinst bcc} {typeinst slot bcc} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=multiple
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.container context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.container} {eval typeinst bcc} {typeinst slot bcc} {typedecl object typeinst} {typedecl struct struct}}
!!! nest: instantiate full slot message.public_p
////// (typeinst_args) lookahead_ctx=typedecl struct slot inst_type=slot args={{
                        struct.slot.name [domNode0x1ad76e0 @x-name]
                        struct.slot.type [domNode0x1ad76e0 @x-type]
                        struct.slot.parent message
                        if { [domNode0x1ad76e0 hasAttribute "x-default_value"] } {
                            struct.slot.default_value [domNode0x1ad76e0 @x-default_value ""]
                        }
                        if { [domNode0x1ad76e0 hasAttribute "x-optional_p"] } {
                            struct.slot.optional_p [domNode0x1ad76e0 @x-optional_p ""]
                        }
                        if { [domNode0x1ad76e0 hasAttribute "x-container"] } {
                            struct.slot.container [domNode0x1ad76e0 @x-container ""]
                        }
                    }}
--->>> (typeinst_helper) inst_type=slot inst_name=public_p context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=public_p
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.name} {eval typeinst public_p} {typeinst slot public_p} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=bool
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.type} {eval typeinst public_p} {typeinst slot public_p} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=message
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.parent context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.parent} {eval typeinst public_p} {typeinst slot public_p} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=false
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.default_value context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.default_value} {eval typeinst public_p} {typeinst slot public_p} {typedecl object typeinst} {typedecl struct struct}}
!!! nest: instantiate full slot message.categories
////// (typeinst_args) lookahead_ctx=typedecl struct slot inst_type=slot args={{
                        struct.slot.name [domNode0x1ad7880 @x-name]
                        struct.slot.type [domNode0x1ad7880 @x-type]
                        struct.slot.parent message
                        if { [domNode0x1ad7880 hasAttribute "x-default_value"] } {
                            struct.slot.default_value [domNode0x1ad7880 @x-default_value ""]
                        }
                        if { [domNode0x1ad7880 hasAttribute "x-optional_p"] } {
                            struct.slot.optional_p [domNode0x1ad7880 @x-optional_p ""]
                        }
                        if { [domNode0x1ad7880 hasAttribute "x-container"] } {
                            struct.slot.container [domNode0x1ad7880 @x-container ""]
                        }
                    }}
--->>> (typeinst_helper) inst_type=slot inst_name=categories context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=categories
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.name} {eval typeinst categories} {typeinst slot categories} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=category
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.type} {eval typeinst categories} {typeinst slot categories} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=message
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.parent context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.parent} {eval typeinst categories} {typeinst slot categories} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args={{}}
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.default_value context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.default_value} {eval typeinst categories} {typeinst slot categories} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=multiple
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.container context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.container} {eval typeinst categories} {typeinst slot categories} {typedecl object typeinst} {typedecl struct struct}}
!!! nest: instantiate full slot message.folders
////// (typeinst_args) lookahead_ctx=typedecl struct slot inst_type=slot args={{
                        struct.slot.name [domNode0x1ad7a80 @x-name]
                        struct.slot.type [domNode0x1ad7a80 @x-type]
                        struct.slot.parent message
                        if { [domNode0x1ad7a80 hasAttribute "x-default_value"] } {
                            struct.slot.default_value [domNode0x1ad7a80 @x-default_value ""]
                        }
                        if { [domNode0x1ad7a80 hasAttribute "x-optional_p"] } {
                            struct.slot.optional_p [domNode0x1ad7a80 @x-optional_p ""]
                        }
                        if { [domNode0x1ad7a80 hasAttribute "x-container"] } {
                            struct.slot.container [domNode0x1ad7a80 @x-container ""]
                        }
                    }}
--->>> (typeinst_helper) inst_type=slot inst_name=folders context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=folders
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.name} {eval typeinst folders} {typeinst slot folders} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=folder
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.type} {eval typeinst folders} {typeinst slot folders} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=message
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.parent context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.parent} {eval typeinst folders} {typeinst slot folders} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args={{}}
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.default_value context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.default_value} {eval typeinst folders} {typeinst slot folders} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=multiple
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.container context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.container} {eval typeinst folders} {typeinst slot folders} {typedecl object typeinst} {typedecl struct struct}}
!!! nest: instantiate full slot message.tags
////// (typeinst_args) lookahead_ctx=typedecl struct slot inst_type=slot args={{
                        struct.slot.name [domNode0x1ad7c80 @x-name]
                        struct.slot.type [domNode0x1ad7c80 @x-type]
                        struct.slot.parent message
                        if { [domNode0x1ad7c80 hasAttribute "x-default_value"] } {
                            struct.slot.default_value [domNode0x1ad7c80 @x-default_value ""]
                        }
                        if { [domNode0x1ad7c80 hasAttribute "x-optional_p"] } {
                            struct.slot.optional_p [domNode0x1ad7c80 @x-optional_p ""]
                        }
                        if { [domNode0x1ad7c80 hasAttribute "x-container"] } {
                            struct.slot.container [domNode0x1ad7c80 @x-container ""]
                        }
                    }}
--->>> (typeinst_helper) inst_type=slot inst_name=tags context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=tags
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.name} {eval typeinst tags} {typeinst slot tags} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=varchar
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.type} {eval typeinst tags} {typeinst slot tags} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=message
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.parent context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.parent} {eval typeinst tags} {typeinst slot tags} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args={{}}
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.default_value context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.default_value} {eval typeinst tags} {typeinst slot tags} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=multiple
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.container context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.container} {eval typeinst tags} {typeinst slot tags} {typedecl object typeinst} {typedecl struct struct}}
!!! nest: instantiate full slot message.attachment
////// (typeinst_args) lookahead_ctx=typedecl struct slot inst_type=slot args={{
                        struct.slot.name [domNode0x1ad7e80 @x-name]
                        struct.slot.type [domNode0x1ad7e80 @x-type]
                        struct.slot.parent message
                        if { [domNode0x1ad7e80 hasAttribute "x-default_value"] } {
                            struct.slot.default_value [domNode0x1ad7e80 @x-default_value ""]
                        }
                        if { [domNode0x1ad7e80 hasAttribute "x-optional_p"] } {
                            struct.slot.optional_p [domNode0x1ad7e80 @x-optional_p ""]
                        }
                        if { [domNode0x1ad7e80 hasAttribute "x-container"] } {
                            struct.slot.container [domNode0x1ad7e80 @x-container ""]
                        }
                    }}
--->>> (typeinst_helper) inst_type=slot inst_name=attachment context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=attachment
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.name} {eval typeinst attachment} {typeinst slot attachment} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=file
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.type} {eval typeinst attachment} {typeinst slot attachment} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=message
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.parent context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.parent} {eval typeinst attachment} {typeinst slot attachment} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args={{}}
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.default_value context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.default_value} {eval typeinst attachment} {typeinst slot attachment} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=multiple
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.container context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.container} {eval typeinst attachment} {typeinst slot attachment} {typedecl object typeinst} {typedecl struct struct}}
!!! nest: instantiate full slot message.wordcount_Y
////// (typeinst_args) lookahead_ctx=typedecl struct slot inst_type=slot args={{
                        struct.slot.name [domNode0x1ae14e0 @x-name]
                        struct.slot.type [domNode0x1ae14e0 @x-type]
                        struct.slot.parent message
                        if { [domNode0x1ae14e0 hasAttribute "x-default_value"] } {
                            struct.slot.default_value [domNode0x1ae14e0 @x-default_value ""]
                        }
                        if { [domNode0x1ae14e0 hasAttribute "x-optional_p"] } {
                            struct.slot.optional_p [domNode0x1ae14e0 @x-optional_p ""]
                        }
                        if { [domNode0x1ae14e0 hasAttribute "x-container"] } {
                            struct.slot.container [domNode0x1ae14e0 @x-container ""]
                        }
                    }}
--->>> (typeinst_helper) inst_type=slot inst_name=wordcount_Y context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=wordcount_Y
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.name} {eval typeinst wordcount_Y} {typeinst slot wordcount_Y} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=word_count_pair
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.type} {eval typeinst wordcount_Y} {typeinst slot wordcount_Y} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=message
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.parent context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.parent} {eval typeinst wordcount_Y} {typeinst slot wordcount_Y} {typedecl object typeinst} {typedecl struct struct}}
!!! nest: instantiate full slot message.wordcount_Z
////// (typeinst_args) lookahead_ctx=typedecl struct slot inst_type=slot args={{
                        struct.slot.name [domNode0x1ae1620 @x-name]
                        struct.slot.type [domNode0x1ae1620 @x-type]
                        struct.slot.parent message
                        if { [domNode0x1ae1620 hasAttribute "x-default_value"] } {
                            struct.slot.default_value [domNode0x1ae1620 @x-default_value ""]
                        }
                        if { [domNode0x1ae1620 hasAttribute "x-optional_p"] } {
                            struct.slot.optional_p [domNode0x1ae1620 @x-optional_p ""]
                        }
                        if { [domNode0x1ae1620 hasAttribute "x-container"] } {
                            struct.slot.container [domNode0x1ae1620 @x-container ""]
                        }
                    }}
--->>> (typeinst_helper) inst_type=slot inst_name=wordcount_Z context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=wordcount_Z
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.name} {eval typeinst wordcount_Z} {typeinst slot wordcount_Z} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=word_count_pair
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.type} {eval typeinst wordcount_Z} {typeinst slot wordcount_Z} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=message
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.parent context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.parent} {eval typeinst wordcount_Z} {typeinst slot wordcount_Z} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args={{}}
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.default_value context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.default_value} {eval typeinst wordcount_Z} {typeinst slot wordcount_Z} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=map
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.container context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.container} {eval typeinst wordcount_Z} {typeinst slot wordcount_Z} {typedecl object typeinst} {typedecl struct struct}}
!!! nest: instantiate full slot message.words
////// (typeinst_args) lookahead_ctx=typedecl struct slot inst_type=slot args={{
                        struct.slot.name [domNode0x1ae1820 @x-name]
                        struct.slot.type [domNode0x1ae1820 @x-type]
                        struct.slot.parent message
                        if { [domNode0x1ae1820 hasAttribute "x-default_value"] } {
                            struct.slot.default_value [domNode0x1ae1820 @x-default_value ""]
                        }
                        if { [domNode0x1ae1820 hasAttribute "x-optional_p"] } {
                            struct.slot.optional_p [domNode0x1ae1820 @x-optional_p ""]
                        }
                        if { [domNode0x1ae1820 hasAttribute "x-container"] } {
                            struct.slot.container [domNode0x1ae1820 @x-container ""]
                        }
                    }}
--->>> (typeinst_helper) inst_type=slot inst_name=words context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=words
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.name} {eval typeinst words} {typeinst slot words} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=varchar
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.type context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.type} {eval typeinst words} {typeinst slot words} {typedecl object typeinst} {typedecl struct struct}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=message
--->>> (typeinst_helper) inst_type=varchar inst_name=struct.slot.parent context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar struct.slot.parent} {eval typeinst words} {typeinst slot words} {typedecl object typeinst} {typedecl struct struct}}
--->>> (type_helper) message msg4 {*}{
    subject "hello"
    from {
        name "zena wow"
        address "zena@example.com"
    }
    body "this is a test"
    to {
        name "paris love"
        address "bff@example.com"
    }
    cc { 
        name "jane awesome"
        address "jane@example.com"
    }
    cc { 
        name "someone great" 
        address "someone@example.com" 
    }
    multiple bcc {{
        name "vera cool"
        address "vera@example.com"
    } {
        name "greg wise"
        address "greg@example.com"
    } {
        name "max loyal"
        address "max@example.com"
    }}
    if {0} {
        map wordcount_X {{
            word "the"
            count "123"
        } {
            word "and"
            count "54"
        }}
    }
    map wordcount_Y {{
        word "the"
        count "123"
    } {
        word "and"
        count "54"
    }}
}
////// (typeinst_args) lookahead_ctx=typedecl struct message inst_type=message args={{
    subject "hello"
    from {
        name "zena wow"
        address "zena@example.com"
    }
    body "this is a test"
    to {
        name "paris love"
        address "bff@example.com"
    }
    cc { 
        name "jane awesome"
        address "jane@example.com"
    }
    cc { 
        name "someone great" 
        address "someone@example.com" 
    }
    multiple bcc {{
        name "vera cool"
        address "vera@example.com"
    } {
        name "greg wise"
        address "greg@example.com"
    } {
        name "max loyal"
        address "max@example.com"
    }}
    if {0} {
        map wordcount_X {{
            word "the"
            count "123"
        } {
            word "and"
            count "54"
        }}
    }
    map wordcount_Y {{
        word "the"
        count "123"
    } {
        word "and"
        count "54"
    }}
}}
--->>> (typeinst_helper) inst_type=message inst_name=msg4 context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) subject hello args= stack_ctx={{typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) checking each context for "subject" -> typeinst.subject (0)
--->>> (unknown) checking each context for "subject" -> message.subject (1)
+++ subject hello  -> redirect_name=message.subject
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=hello
--->>> (typeinst_helper) inst_type=varchar inst_name=message.subject context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar message.subject} {unknown unknown message.subject} {eval typeinst msg4} {typeinst message msg4} {typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) from 
        name "zena wow"
        address "zena@example.com"
     args= stack_ctx={{typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) checking each context for "from" -> typeinst.from (0)
--->>> (unknown) checking each context for "from" -> message.from (1)
+++ from 
        name "zena wow"
        address "zena@example.com"
      -> redirect_name=message.from
////// (typeinst_args) lookahead_ctx=typedecl struct email inst_type=email args={{
        name "zena wow"
        address "zena@example.com"
    }}
--->>> (typeinst_helper) inst_type=email inst_name=message.from context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl email message.from} {unknown unknown message.from} {eval typeinst msg4} {typeinst message msg4} {typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) name zena wow args= stack_ctx={{typedecl object typeinst} {typedecl email message.from} {typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) checking each context for "name" -> typeinst.name (0)
--->>> (unknown) checking each context for "name" -> message.from.name (0)
+++ name zena wow  -> redirect_name=email.name
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args={{zena wow}}
--->>> (typeinst_helper) inst_type=varchar inst_name=email.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar email.name} {unknown unknown email.name} {eval typeinst message.from} {typeinst email message.from} {typedecl object typeinst} {typedecl email message.from} {unknown unknown message.from} {eval typeinst msg4} {typeinst message msg4} {typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) address zena@example.com args= stack_ctx={{typedecl object typeinst} {typedecl email message.from} {typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) checking each context for "address" -> typeinst.address (0)
--->>> (unknown) checking each context for "address" -> message.from.address (0)
+++ address zena@example.com  -> redirect_name=email.address
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=zena@example.com
--->>> (typeinst_helper) inst_type=varchar inst_name=email.address context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar email.address} {unknown unknown email.address} {eval typeinst message.from} {typeinst email message.from} {typedecl object typeinst} {typedecl email message.from} {unknown unknown message.from} {eval typeinst msg4} {typeinst message msg4} {typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) body this is a test args= stack_ctx={{typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) checking each context for "body" -> typeinst.body (0)
--->>> (unknown) checking each context for "body" -> message.body (1)
+++ body this is a test  -> redirect_name=message.body
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args={{this is a test}}
--->>> (typeinst_helper) inst_type=varchar inst_name=message.body context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar message.body} {unknown unknown message.body} {eval typeinst msg4} {typeinst message msg4} {typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) to 
        name "paris love"
        address "bff@example.com"
     args= stack_ctx={{typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) checking each context for "to" -> typeinst.to (0)
--->>> (unknown) checking each context for "to" -> message.to (1)
+++ to 
        name "paris love"
        address "bff@example.com"
      -> redirect_name=message.to
////// (typeinst_args) lookahead_ctx=typedecl struct email inst_type=email args={{
        name "paris love"
        address "bff@example.com"
    }}
--->>> (typeinst_helper) inst_type=email inst_name=message.to context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl email message.to} {unknown unknown message.to} {eval typeinst msg4} {typeinst message msg4} {typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) name paris love args= stack_ctx={{typedecl object typeinst} {typedecl email message.to} {typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) checking each context for "name" -> typeinst.name (0)
--->>> (unknown) checking each context for "name" -> message.to.name (0)
+++ name paris love  -> redirect_name=email.name
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args={{paris love}}
--->>> (typeinst_helper) inst_type=varchar inst_name=email.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar email.name} {unknown unknown email.name} {eval typeinst message.to} {typeinst email message.to} {typedecl object typeinst} {typedecl email message.to} {unknown unknown message.to} {eval typeinst msg4} {typeinst message msg4} {typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) address bff@example.com args= stack_ctx={{typedecl object typeinst} {typedecl email message.to} {typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) checking each context for "address" -> typeinst.address (0)
--->>> (unknown) checking each context for "address" -> message.to.address (0)
+++ address bff@example.com  -> redirect_name=email.address
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=bff@example.com
--->>> (typeinst_helper) inst_type=varchar inst_name=email.address context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar email.address} {unknown unknown email.address} {eval typeinst message.to} {typeinst email message.to} {typedecl object typeinst} {typedecl email message.to} {unknown unknown message.to} {eval typeinst msg4} {typeinst message msg4} {typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) cc  
        name "jane awesome"
        address "jane@example.com"
     args= stack_ctx={{typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) checking each context for "cc" -> typeinst.cc (0)
--->>> (unknown) checking each context for "cc" -> message.cc (1)
+++ cc  
        name "jane awesome"
        address "jane@example.com"
      -> redirect_name=message.cc
////// (typeinst_args) lookahead_ctx=typedecl struct email inst_type=email args={{ 
        name "jane awesome"
        address "jane@example.com"
    }}
--->>> (typeinst_helper) inst_type=email inst_name=message.cc context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl email message.cc} {unknown unknown message.cc} {eval typeinst msg4} {typeinst message msg4} {typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) name jane awesome args= stack_ctx={{typedecl object typeinst} {typedecl email message.cc} {typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) checking each context for "name" -> typeinst.name (0)
--->>> (unknown) checking each context for "name" -> message.cc.name (0)
+++ name jane awesome  -> redirect_name=email.name
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args={{jane awesome}}
--->>> (typeinst_helper) inst_type=varchar inst_name=email.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar email.name} {unknown unknown email.name} {eval typeinst message.cc} {typeinst email message.cc} {typedecl object typeinst} {typedecl email message.cc} {unknown unknown message.cc} {eval typeinst msg4} {typeinst message msg4} {typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) address jane@example.com args= stack_ctx={{typedecl object typeinst} {typedecl email message.cc} {typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) checking each context for "address" -> typeinst.address (0)
--->>> (unknown) checking each context for "address" -> message.cc.address (0)
+++ address jane@example.com  -> redirect_name=email.address
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=jane@example.com
--->>> (typeinst_helper) inst_type=varchar inst_name=email.address context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar email.address} {unknown unknown email.address} {eval typeinst message.cc} {typeinst email message.cc} {typedecl object typeinst} {typedecl email message.cc} {unknown unknown message.cc} {eval typeinst msg4} {typeinst message msg4} {typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) cc  
        name "someone great" 
        address "someone@example.com" 
     args= stack_ctx={{typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) checking each context for "cc" -> typeinst.cc (0)
--->>> (unknown) checking each context for "cc" -> message.cc (1)
+++ cc  
        name "someone great" 
        address "someone@example.com" 
      -> redirect_name=message.cc
////// (typeinst_args) lookahead_ctx=typedecl struct email inst_type=email args={{ 
        name "someone great" 
        address "someone@example.com" 
    }}
--->>> (typeinst_helper) inst_type=email inst_name=message.cc context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl email message.cc} {unknown unknown message.cc} {eval typeinst msg4} {typeinst message msg4} {typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) name someone great args= stack_ctx={{typedecl object typeinst} {typedecl email message.cc} {typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) checking each context for "name" -> typeinst.name (0)
--->>> (unknown) checking each context for "name" -> message.cc.name (0)
+++ name someone great  -> redirect_name=email.name
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args={{someone great}}
--->>> (typeinst_helper) inst_type=varchar inst_name=email.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar email.name} {unknown unknown email.name} {eval typeinst message.cc} {typeinst email message.cc} {typedecl object typeinst} {typedecl email message.cc} {unknown unknown message.cc} {eval typeinst msg4} {typeinst message msg4} {typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) address someone@example.com args= stack_ctx={{typedecl object typeinst} {typedecl email message.cc} {typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) checking each context for "address" -> typeinst.address (0)
--->>> (unknown) checking each context for "address" -> message.cc.address (0)
+++ address someone@example.com  -> redirect_name=email.address
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=someone@example.com
--->>> (typeinst_helper) inst_type=varchar inst_name=email.address context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar email.address} {unknown unknown email.address} {eval typeinst message.cc} {typeinst email message.cc} {typedecl object typeinst} {typedecl email message.cc} {unknown unknown message.cc} {eval typeinst msg4} {typeinst message msg4} {typedecl object typeinst} {typedecl struct message}}
@@@@ (container_helper) llength_args=1 instantiation_p=1
----- (container instantiation) name=bcc args={{
        name "vera cool"
        address "vera@example.com"
    } {
        name "greg wise"
        address "greg@example.com"
    } {
        name "max loyal"
        address "max@example.com"
    }}
--->>> (unknown) bcc 
        name "vera cool"
        address "vera@example.com"
     args= stack_ctx={{typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) checking each context for "bcc" -> typeinst.bcc (0)
--->>> (unknown) checking each context for "bcc" -> message.bcc (1)
+++ bcc 
        name "vera cool"
        address "vera@example.com"
      -> redirect_name=message.bcc
////// (typeinst_args) lookahead_ctx=typedecl struct email inst_type=email args={{
        name "vera cool"
        address "vera@example.com"
    }}
--->>> (typeinst_helper) inst_type=email inst_name=message.bcc context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl email message.bcc} {unknown unknown message.bcc} {eval typeinst msg4} {typeinst message msg4} {typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) name vera cool args= stack_ctx={{typedecl object typeinst} {typedecl email message.bcc} {typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) checking each context for "name" -> typeinst.name (0)
--->>> (unknown) checking each context for "name" -> message.bcc.name (0)
+++ name vera cool  -> redirect_name=email.name
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args={{vera cool}}
--->>> (typeinst_helper) inst_type=varchar inst_name=email.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar email.name} {unknown unknown email.name} {eval typeinst message.bcc} {typeinst email message.bcc} {typedecl object typeinst} {typedecl email message.bcc} {unknown unknown message.bcc} {eval typeinst msg4} {typeinst message msg4} {typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) address vera@example.com args= stack_ctx={{typedecl object typeinst} {typedecl email message.bcc} {typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) checking each context for "address" -> typeinst.address (0)
--->>> (unknown) checking each context for "address" -> message.bcc.address (0)
+++ address vera@example.com  -> redirect_name=email.address
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=vera@example.com
--->>> (typeinst_helper) inst_type=varchar inst_name=email.address context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar email.address} {unknown unknown email.address} {eval typeinst message.bcc} {typeinst email message.bcc} {typedecl object typeinst} {typedecl email message.bcc} {unknown unknown message.bcc} {eval typeinst msg4} {typeinst message msg4} {typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) bcc 
        name "greg wise"
        address "greg@example.com"
     args= stack_ctx={{typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) checking each context for "bcc" -> typeinst.bcc (0)
--->>> (unknown) checking each context for "bcc" -> message.bcc (1)
+++ bcc 
        name "greg wise"
        address "greg@example.com"
      -> redirect_name=message.bcc
////// (typeinst_args) lookahead_ctx=typedecl struct email inst_type=email args={{
        name "greg wise"
        address "greg@example.com"
    }}
--->>> (typeinst_helper) inst_type=email inst_name=message.bcc context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl email message.bcc} {unknown unknown message.bcc} {eval typeinst msg4} {typeinst message msg4} {typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) name greg wise args= stack_ctx={{typedecl object typeinst} {typedecl email message.bcc} {typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) checking each context for "name" -> typeinst.name (0)
--->>> (unknown) checking each context for "name" -> message.bcc.name (0)
+++ name greg wise  -> redirect_name=email.name
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args={{greg wise}}
--->>> (typeinst_helper) inst_type=varchar inst_name=email.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar email.name} {unknown unknown email.name} {eval typeinst message.bcc} {typeinst email message.bcc} {typedecl object typeinst} {typedecl email message.bcc} {unknown unknown message.bcc} {eval typeinst msg4} {typeinst message msg4} {typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) address greg@example.com args= stack_ctx={{typedecl object typeinst} {typedecl email message.bcc} {typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) checking each context for "address" -> typeinst.address (0)
--->>> (unknown) checking each context for "address" -> message.bcc.address (0)
+++ address greg@example.com  -> redirect_name=email.address
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=greg@example.com
--->>> (typeinst_helper) inst_type=varchar inst_name=email.address context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar email.address} {unknown unknown email.address} {eval typeinst message.bcc} {typeinst email message.bcc} {typedecl object typeinst} {typedecl email message.bcc} {unknown unknown message.bcc} {eval typeinst msg4} {typeinst message msg4} {typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) bcc 
        name "max loyal"
        address "max@example.com"
     args= stack_ctx={{typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) checking each context for "bcc" -> typeinst.bcc (0)
--->>> (unknown) checking each context for "bcc" -> message.bcc (1)
+++ bcc 
        name "max loyal"
        address "max@example.com"
      -> redirect_name=message.bcc
////// (typeinst_args) lookahead_ctx=typedecl struct email inst_type=email args={{
        name "max loyal"
        address "max@example.com"
    }}
--->>> (typeinst_helper) inst_type=email inst_name=message.bcc context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl email message.bcc} {unknown unknown message.bcc} {eval typeinst msg4} {typeinst message msg4} {typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) name max loyal args= stack_ctx={{typedecl object typeinst} {typedecl email message.bcc} {typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) checking each context for "name" -> typeinst.name (0)
--->>> (unknown) checking each context for "name" -> message.bcc.name (0)
+++ name max loyal  -> redirect_name=email.name
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args={{max loyal}}
--->>> (typeinst_helper) inst_type=varchar inst_name=email.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar email.name} {unknown unknown email.name} {eval typeinst message.bcc} {typeinst email message.bcc} {typedecl object typeinst} {typedecl email message.bcc} {unknown unknown message.bcc} {eval typeinst msg4} {typeinst message msg4} {typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) address max@example.com args= stack_ctx={{typedecl object typeinst} {typedecl email message.bcc} {typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) checking each context for "address" -> typeinst.address (0)
--->>> (unknown) checking each context for "address" -> message.bcc.address (0)
+++ address max@example.com  -> redirect_name=email.address
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=max@example.com
--->>> (typeinst_helper) inst_type=varchar inst_name=email.address context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar email.address} {unknown unknown email.address} {eval typeinst message.bcc} {typeinst email message.bcc} {typedecl object typeinst} {typedecl email message.bcc} {unknown unknown message.bcc} {eval typeinst msg4} {typeinst message msg4} {typedecl object typeinst} {typedecl struct message}}
@@@@ (container_helper) llength_args=1 instantiation_p=1
----- (container instantiation) name=wordcount_Y args={{
        word "the"
        count "123"
    } {
        word "and"
        count "54"
    }}
--->>> (unknown) wordcount_Y 
        word "the"
        count "123"
     args= stack_ctx={{typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) checking each context for "wordcount_Y" -> typeinst.wordcount_Y (0)
--->>> (unknown) checking each context for "wordcount_Y" -> message.wordcount_Y (1)
+++ wordcount_Y 
        word "the"
        count "123"
      -> redirect_name=message.wordcount_Y
////// (typeinst_args) lookahead_ctx=typedecl struct word_count_pair inst_type=word_count_pair args={{
        word "the"
        count "123"
    }}
--->>> (typeinst_helper) inst_type=word_count_pair inst_name=message.wordcount_Y context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl word_count_pair message.wordcount_Y} {unknown unknown message.wordcount_Y} {eval typeinst msg4} {typeinst message msg4} {typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) word the args= stack_ctx={{typedecl object typeinst} {typedecl word_count_pair message.wordcount_Y} {typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) checking each context for "word" -> typeinst.word (0)
--->>> (unknown) checking each context for "word" -> message.wordcount_Y.word (0)
+++ word the  -> redirect_name=word_count_pair.word
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=the
--->>> (typeinst_helper) inst_type=varchar inst_name=word_count_pair.word context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar word_count_pair.word} {unknown unknown word_count_pair.word} {eval typeinst message.wordcount_Y} {typeinst word_count_pair message.wordcount_Y} {typedecl object typeinst} {typedecl word_count_pair message.wordcount_Y} {unknown unknown message.wordcount_Y} {eval typeinst msg4} {typeinst message msg4} {typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) count 123 args= stack_ctx={{typedecl object typeinst} {typedecl word_count_pair message.wordcount_Y} {typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) checking each context for "count" -> typeinst.count (0)
--->>> (unknown) checking each context for "count" -> message.wordcount_Y.count (0)
+++ count 123  -> redirect_name=word_count_pair.count
////// (typeinst_args) lookahead_ctx=typedecl base_type varint inst_type=varint args=123
--->>> (typeinst_helper) inst_type=varint inst_name=word_count_pair.count context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varint word_count_pair.count} {unknown unknown word_count_pair.count} {eval typeinst message.wordcount_Y} {typeinst word_count_pair message.wordcount_Y} {typedecl object typeinst} {typedecl word_count_pair message.wordcount_Y} {unknown unknown message.wordcount_Y} {eval typeinst msg4} {typeinst message msg4} {typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) wordcount_Y 
        word "and"
        count "54"
     args= stack_ctx={{typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) checking each context for "wordcount_Y" -> typeinst.wordcount_Y (0)
--->>> (unknown) checking each context for "wordcount_Y" -> message.wordcount_Y (1)
+++ wordcount_Y 
        word "and"
        count "54"
      -> redirect_name=message.wordcount_Y
////// (typeinst_args) lookahead_ctx=typedecl struct word_count_pair inst_type=word_count_pair args={{
        word "and"
        count "54"
    }}
--->>> (typeinst_helper) inst_type=word_count_pair inst_name=message.wordcount_Y context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl word_count_pair message.wordcount_Y} {unknown unknown message.wordcount_Y} {eval typeinst msg4} {typeinst message msg4} {typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) word and args= stack_ctx={{typedecl object typeinst} {typedecl word_count_pair message.wordcount_Y} {typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) checking each context for "word" -> typeinst.word (0)
--->>> (unknown) checking each context for "word" -> message.wordcount_Y.word (0)
+++ word and  -> redirect_name=word_count_pair.word
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=and
--->>> (typeinst_helper) inst_type=varchar inst_name=word_count_pair.word context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar word_count_pair.word} {unknown unknown word_count_pair.word} {eval typeinst message.wordcount_Y} {typeinst word_count_pair message.wordcount_Y} {typedecl object typeinst} {typedecl word_count_pair message.wordcount_Y} {unknown unknown message.wordcount_Y} {eval typeinst msg4} {typeinst message msg4} {typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) count 54 args= stack_ctx={{typedecl object typeinst} {typedecl word_count_pair message.wordcount_Y} {typedecl object typeinst} {typedecl struct message}}
--->>> (unknown) checking each context for "count" -> typeinst.count (0)
--->>> (unknown) checking each context for "count" -> message.wordcount_Y.count (0)
+++ count 54  -> redirect_name=word_count_pair.count
////// (typeinst_args) lookahead_ctx=typedecl base_type varint inst_type=varint args=54
--->>> (typeinst_helper) inst_type=varint inst_name=word_count_pair.count context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varint word_count_pair.count} {unknown unknown word_count_pair.count} {eval typeinst message.wordcount_Y} {typeinst word_count_pair message.wordcount_Y} {typedecl object typeinst} {typedecl word_count_pair message.wordcount_Y} {unknown unknown message.wordcount_Y} {eval typeinst msg4} {typeinst message msg4} {typedecl object typeinst} {typedecl struct message}}
--->>> (type_helper) message msg3 {*}{
    message.subject "hello"
    message.from {
        email.name "zena wow"
        email.address "zena@example.com"
    }
    message.to {
        email.name "paris love"
        email.address "bff@example.com"
    }
    message.body = "this is a test"
    message.cc { 
        email.name "jane awesome"
        email.address "jane@example.com"
    }
    message.cc { 
        email.name "someone great" 
        email.address "someone@example.com" 
    }
    multiple message.bcc {{
        email.name "vera cool"
        email.address "vera@example.com"
    } {
        email.name "greg wise"
        email.address "greg@example.com"
    } {
        email.name "max loyal"
        email.address "max@example.com"
    }}
    if {0} {
        map message.wordcount_X {{
            message.wordcount_X.word "the"
            message.wordcount_X.count "123"
        } {
            message.wordcount_X.word "and"
            message.wordcount_X.count "54"
        }}
    }
    map message.wordcount_Y {{
        word_count_pair.word "the"
        word_count_pair.count "123"
    } {
        word_count_pair.word "and"
        word_count_pair.count "54"
    }}
}
////// (typeinst_args) lookahead_ctx=typedecl struct message inst_type=message args={{
    message.subject "hello"
    message.from {
        email.name "zena wow"
        email.address "zena@example.com"
    }
    message.to {
        email.name "paris love"
        email.address "bff@example.com"
    }
    message.body = "this is a test"
    message.cc { 
        email.name "jane awesome"
        email.address "jane@example.com"
    }
    message.cc { 
        email.name "someone great" 
        email.address "someone@example.com" 
    }
    multiple message.bcc {{
        email.name "vera cool"
        email.address "vera@example.com"
    } {
        email.name "greg wise"
        email.address "greg@example.com"
    } {
        email.name "max loyal"
        email.address "max@example.com"
    }}
    if {0} {
        map message.wordcount_X {{
            message.wordcount_X.word "the"
            message.wordcount_X.count "123"
        } {
            message.wordcount_X.word "and"
            message.wordcount_X.count "54"
        }}
    }
    map message.wordcount_Y {{
        word_count_pair.word "the"
        word_count_pair.count "123"
    } {
        word_count_pair.word "and"
        word_count_pair.count "54"
    }}
}}
--->>> (typeinst_helper) inst_type=message inst_name=msg3 context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct message}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=hello
--->>> (typeinst_helper) inst_type=varchar inst_name=message.subject context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar message.subject} {eval typeinst msg3} {typeinst message msg3} {typedecl object typeinst} {typedecl struct message}}
////// (typeinst_args) lookahead_ctx=typedecl struct email inst_type=email args={{
        email.name "zena wow"
        email.address "zena@example.com"
    }}
--->>> (typeinst_helper) inst_type=email inst_name=message.from context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl email message.from} {eval typeinst msg3} {typeinst message msg3} {typedecl object typeinst} {typedecl struct message}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args={{zena wow}}
--->>> (typeinst_helper) inst_type=varchar inst_name=email.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar email.name} {eval typeinst message.from} {typeinst email message.from} {typedecl object typeinst} {typedecl email message.from} {eval typeinst msg3} {typeinst message msg3} {typedecl object typeinst} {typedecl struct message}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=zena@example.com
--->>> (typeinst_helper) inst_type=varchar inst_name=email.address context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar email.address} {eval typeinst message.from} {typeinst email message.from} {typedecl object typeinst} {typedecl email message.from} {eval typeinst msg3} {typeinst message msg3} {typedecl object typeinst} {typedecl struct message}}
////// (typeinst_args) lookahead_ctx=typedecl struct email inst_type=email args={{
        email.name "paris love"
        email.address "bff@example.com"
    }}
--->>> (typeinst_helper) inst_type=email inst_name=message.to context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl email message.to} {eval typeinst msg3} {typeinst message msg3} {typedecl object typeinst} {typedecl struct message}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args={{paris love}}
--->>> (typeinst_helper) inst_type=varchar inst_name=email.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar email.name} {eval typeinst message.to} {typeinst email message.to} {typedecl object typeinst} {typedecl email message.to} {eval typeinst msg3} {typeinst message msg3} {typedecl object typeinst} {typedecl struct message}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=bff@example.com
--->>> (typeinst_helper) inst_type=varchar inst_name=email.address context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar email.address} {eval typeinst message.to} {typeinst email message.to} {typedecl object typeinst} {typedecl email message.to} {eval typeinst msg3} {typeinst message msg3} {typedecl object typeinst} {typedecl struct message}}
--->>> (typeinst_helper) inst_type=varchar inst_name=message.body context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar message.body} {eval typeinst msg3} {typeinst message msg3} {typedecl object typeinst} {typedecl struct message}}
////// (typeinst_args) lookahead_ctx=typedecl struct email inst_type=email args={{ 
        email.name "jane awesome"
        email.address "jane@example.com"
    }}
--->>> (typeinst_helper) inst_type=email inst_name=message.cc context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl email message.cc} {eval typeinst msg3} {typeinst message msg3} {typedecl object typeinst} {typedecl struct message}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args={{jane awesome}}
--->>> (typeinst_helper) inst_type=varchar inst_name=email.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar email.name} {eval typeinst message.cc} {typeinst email message.cc} {typedecl object typeinst} {typedecl email message.cc} {eval typeinst msg3} {typeinst message msg3} {typedecl object typeinst} {typedecl struct message}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=jane@example.com
--->>> (typeinst_helper) inst_type=varchar inst_name=email.address context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar email.address} {eval typeinst message.cc} {typeinst email message.cc} {typedecl object typeinst} {typedecl email message.cc} {eval typeinst msg3} {typeinst message msg3} {typedecl object typeinst} {typedecl struct message}}
////// (typeinst_args) lookahead_ctx=typedecl struct email inst_type=email args={{ 
        email.name "someone great" 
        email.address "someone@example.com" 
    }}
--->>> (typeinst_helper) inst_type=email inst_name=message.cc context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl email message.cc} {eval typeinst msg3} {typeinst message msg3} {typedecl object typeinst} {typedecl struct message}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args={{someone great}}
--->>> (typeinst_helper) inst_type=varchar inst_name=email.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar email.name} {eval typeinst message.cc} {typeinst email message.cc} {typedecl object typeinst} {typedecl email message.cc} {eval typeinst msg3} {typeinst message msg3} {typedecl object typeinst} {typedecl struct message}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=someone@example.com
--->>> (typeinst_helper) inst_type=varchar inst_name=email.address context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar email.address} {eval typeinst message.cc} {typeinst email message.cc} {typedecl object typeinst} {typedecl email message.cc} {eval typeinst msg3} {typeinst message msg3} {typedecl object typeinst} {typedecl struct message}}
@@@@ (container_helper) llength_args=1 instantiation_p=1
----- (container instantiation) name=message.bcc args={{
        email.name "vera cool"
        email.address "vera@example.com"
    } {
        email.name "greg wise"
        email.address "greg@example.com"
    } {
        email.name "max loyal"
        email.address "max@example.com"
    }}
////// (typeinst_args) lookahead_ctx=typedecl struct email inst_type=email args={{
        email.name "vera cool"
        email.address "vera@example.com"
    }}
--->>> (typeinst_helper) inst_type=email inst_name=message.bcc context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl email message.bcc} {eval typeinst msg3} {typeinst message msg3} {typedecl object typeinst} {typedecl struct message}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args={{vera cool}}
--->>> (typeinst_helper) inst_type=varchar inst_name=email.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar email.name} {eval typeinst message.bcc} {typeinst email message.bcc} {typedecl object typeinst} {typedecl email message.bcc} {eval typeinst msg3} {typeinst message msg3} {typedecl object typeinst} {typedecl struct message}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=vera@example.com
--->>> (typeinst_helper) inst_type=varchar inst_name=email.address context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar email.address} {eval typeinst message.bcc} {typeinst email message.bcc} {typedecl object typeinst} {typedecl email message.bcc} {eval typeinst msg3} {typeinst message msg3} {typedecl object typeinst} {typedecl struct message}}
////// (typeinst_args) lookahead_ctx=typedecl struct email inst_type=email args={{
        email.name "greg wise"
        email.address "greg@example.com"
    }}
--->>> (typeinst_helper) inst_type=email inst_name=message.bcc context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl email message.bcc} {eval typeinst msg3} {typeinst message msg3} {typedecl object typeinst} {typedecl struct message}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args={{greg wise}}
--->>> (typeinst_helper) inst_type=varchar inst_name=email.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar email.name} {eval typeinst message.bcc} {typeinst email message.bcc} {typedecl object typeinst} {typedecl email message.bcc} {eval typeinst msg3} {typeinst message msg3} {typedecl object typeinst} {typedecl struct message}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=greg@example.com
--->>> (typeinst_helper) inst_type=varchar inst_name=email.address context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar email.address} {eval typeinst message.bcc} {typeinst email message.bcc} {typedecl object typeinst} {typedecl email message.bcc} {eval typeinst msg3} {typeinst message msg3} {typedecl object typeinst} {typedecl struct message}}
////// (typeinst_args) lookahead_ctx=typedecl struct email inst_type=email args={{
        email.name "max loyal"
        email.address "max@example.com"
    }}
--->>> (typeinst_helper) inst_type=email inst_name=message.bcc context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl email message.bcc} {eval typeinst msg3} {typeinst message msg3} {typedecl object typeinst} {typedecl struct message}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args={{max loyal}}
--->>> (typeinst_helper) inst_type=varchar inst_name=email.name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar email.name} {eval typeinst message.bcc} {typeinst email message.bcc} {typedecl object typeinst} {typedecl email message.bcc} {eval typeinst msg3} {typeinst message msg3} {typedecl object typeinst} {typedecl struct message}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=max@example.com
--->>> (typeinst_helper) inst_type=varchar inst_name=email.address context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar email.address} {eval typeinst message.bcc} {typeinst email message.bcc} {typedecl object typeinst} {typedecl email message.bcc} {eval typeinst msg3} {typeinst message msg3} {typedecl object typeinst} {typedecl struct message}}
@@@@ (container_helper) llength_args=1 instantiation_p=1
----- (container instantiation) name=message.wordcount_Y args={{
        word_count_pair.word "the"
        word_count_pair.count "123"
    } {
        word_count_pair.word "and"
        word_count_pair.count "54"
    }}
////// (typeinst_args) lookahead_ctx=typedecl struct word_count_pair inst_type=word_count_pair args={{
        word_count_pair.word "the"
        word_count_pair.count "123"
    }}
--->>> (typeinst_helper) inst_type=word_count_pair inst_name=message.wordcount_Y context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl word_count_pair message.wordcount_Y} {eval typeinst msg3} {typeinst message msg3} {typedecl object typeinst} {typedecl struct message}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=the
--->>> (typeinst_helper) inst_type=varchar inst_name=word_count_pair.word context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar word_count_pair.word} {eval typeinst message.wordcount_Y} {typeinst word_count_pair message.wordcount_Y} {typedecl object typeinst} {typedecl word_count_pair message.wordcount_Y} {eval typeinst msg3} {typeinst message msg3} {typedecl object typeinst} {typedecl struct message}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varint inst_type=varint args=123
--->>> (typeinst_helper) inst_type=varint inst_name=word_count_pair.count context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varint word_count_pair.count} {eval typeinst message.wordcount_Y} {typeinst word_count_pair message.wordcount_Y} {typedecl object typeinst} {typedecl word_count_pair message.wordcount_Y} {eval typeinst msg3} {typeinst message msg3} {typedecl object typeinst} {typedecl struct message}}
////// (typeinst_args) lookahead_ctx=typedecl struct word_count_pair inst_type=word_count_pair args={{
        word_count_pair.word "and"
        word_count_pair.count "54"
    }}
--->>> (typeinst_helper) inst_type=word_count_pair inst_name=message.wordcount_Y context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl word_count_pair message.wordcount_Y} {eval typeinst msg3} {typeinst message msg3} {typedecl object typeinst} {typedecl struct message}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=and
--->>> (typeinst_helper) inst_type=varchar inst_name=word_count_pair.word context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varchar word_count_pair.word} {eval typeinst message.wordcount_Y} {typeinst word_count_pair message.wordcount_Y} {typedecl object typeinst} {typedecl word_count_pair message.wordcount_Y} {eval typeinst msg3} {typeinst message msg3} {typedecl object typeinst} {typedecl struct message}}
////// (typeinst_args) lookahead_ctx=typedecl base_type varint inst_type=varint args=54
--->>> (typeinst_helper) inst_type=varint inst_name=word_count_pair.count context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl varint word_count_pair.count} {eval typeinst message.wordcount_Y} {typeinst word_count_pair message.wordcount_Y} {typedecl object typeinst} {typedecl word_count_pair message.wordcount_Y} {eval typeinst msg3} {typeinst message msg3} {typedecl object typeinst} {typedecl struct message}}
--->>> (type_helper) message msg1 {*}{

    typeinst varchar subject = "hello"

    typeinst email from {
        typeinst varchar name = "zena wow"
        typeinst varchar address = "zena@example.com"
    }

    typeinst varchar body = "this is a test"

}
////// (typeinst_args) lookahead_ctx=typedecl struct message inst_type=message args={{

    typeinst varchar subject = "hello"

    typeinst email from {
        typeinst varchar name = "zena wow"
        typeinst varchar address = "zena@example.com"
    }

    typeinst varchar body = "this is a test"

}}
--->>> (typeinst_helper) inst_type=message inst_name=msg1 context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct message}}
--->>> (typeinst_helper) inst_type=varchar inst_name=subject context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {eval typeinst msg1} {typeinst message msg1} {typedecl object typeinst} {typedecl struct message}}
////// (typeinst_args) lookahead_ctx=typedecl struct email inst_type=email args={{
        typeinst varchar name = "zena wow"
        typeinst varchar address = "zena@example.com"
    }}
--->>> (typeinst_helper) inst_type=email inst_name=from context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {eval typeinst msg1} {typeinst message msg1} {typedecl object typeinst} {typedecl struct message}}
--->>> (typeinst_helper) inst_type=varchar inst_name=name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {eval typeinst from} {typeinst email from} {typedecl object typeinst} {eval typeinst msg1} {typeinst message msg1} {typedecl object typeinst} {typedecl struct message}}
--->>> (typeinst_helper) inst_type=varchar inst_name=address context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {eval typeinst from} {typeinst email from} {typedecl object typeinst} {eval typeinst msg1} {typeinst message msg1} {typedecl object typeinst} {typedecl struct message}}
--->>> (typeinst_helper) inst_type=varchar inst_name=body context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {eval typeinst msg1} {typeinst message msg1} {typedecl object typeinst} {typedecl struct message}}
--->>> (type_helper) message msg2 {*}{
    varchar subject "hello"
    email from {
        varchar name "zena wow"
        varchar address "zena@example.com"
    }
    varchar body "this is a test"
}
////// (typeinst_args) lookahead_ctx=typedecl struct message inst_type=message args={{
    varchar subject "hello"
    email from {
        varchar name "zena wow"
        varchar address "zena@example.com"
    }
    varchar body "this is a test"
}}
--->>> (typeinst_helper) inst_type=message inst_name=msg2 context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct message}}
--->>> (type_helper) varchar subject {*}hello
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=hello
--->>> (typeinst_helper) inst_type=varchar inst_name=subject context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl base_type varchar} {eval typeinst msg2} {typeinst message msg2} {typedecl object typeinst} {typedecl struct message}}
--->>> (type_helper) email from {*}{
        varchar name "zena wow"
        varchar address "zena@example.com"
    }
////// (typeinst_args) lookahead_ctx=typedecl struct email inst_type=email args={{
        varchar name "zena wow"
        varchar address "zena@example.com"
    }}
--->>> (typeinst_helper) inst_type=email inst_name=from context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl struct email} {eval typeinst msg2} {typeinst message msg2} {typedecl object typeinst} {typedecl struct message}}
--->>> (type_helper) varchar name {*}{zena wow}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args={{zena wow}}
--->>> (typeinst_helper) inst_type=varchar inst_name=name context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl base_type varchar} {eval typeinst from} {typeinst email from} {typedecl object typeinst} {typedecl struct email} {eval typeinst msg2} {typeinst message msg2} {typedecl object typeinst} {typedecl struct message}}
--->>> (type_helper) varchar address {*}zena@example.com
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args=zena@example.com
--->>> (typeinst_helper) inst_type=varchar inst_name=address context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl base_type varchar} {eval typeinst from} {typeinst email from} {typedecl object typeinst} {typedecl struct email} {eval typeinst msg2} {typeinst message msg2} {typedecl object typeinst} {typedecl struct message}}
--->>> (type_helper) varchar body {*}{this is a test}
////// (typeinst_args) lookahead_ctx=typedecl base_type varchar inst_type=varchar args={{this is a test}}
--->>> (typeinst_helper) inst_type=varchar inst_name=body context={typedecl object typeinst} stack_ctx={{typedecl object typeinst} {typedecl base_type varchar} {eval typeinst msg2} {typeinst message msg2} {typedecl object typeinst} {typedecl struct message}}
<nest>
    <struct x-name="struct" x-type="struct">
        <typedecl x-name="name" x-type="varchar"/>
        <typedecl x-name="type" x-type="varchar"/>
        <typedecl x-name="nsp" x-type="varchar"/>
        <struct x-name="slot" x-type="struct" x-container="multiple" x-default_value="">
            <typedecl x-name="parent" x-type="varchar"/>
            <typedecl x-name="name" x-type="varchar"/>
            <typedecl x-name="type" x-type="varchar"/>
            <typedecl x-name="default_value" x-type="varchar" x-default_value=""/>
            <typedecl x-name="optional_p" x-type="bool" x-default_value="false"/>
            <typedecl x-name="container" x-type="varchar" x-default_value=""/>
            <typeinst x-name="struct.type" x-type="varchar">struct</typeinst>
            <typeinst x-name="struct.name" x-type="varchar">slot</typeinst>
            <typeinst x-name="struct.nsp" x-type="varchar">::nest::lang</typeinst>
            <typeinst x-name="parent" x-type="slot">
                <typeinst x-name="struct.slot.name" x-type="varchar">parent</typeinst>
                <typeinst x-name="struct.slot.type" x-type="varchar">varchar</typeinst>
                <typeinst x-name="struct.slot.parent" x-type="varchar">slot</typeinst>
            </typeinst>
            <typeinst x-name="name" x-type="slot">
                <typeinst x-name="struct.slot.name" x-type="varchar">name</typeinst>
                <typeinst x-name="struct.slot.type" x-type="varchar">varchar</typeinst>
                <typeinst x-name="struct.slot.parent" x-type="varchar">slot</typeinst>
            </typeinst>
            <typeinst x-name="type" x-type="slot">
                <typeinst x-name="struct.slot.name" x-type="varchar">type</typeinst>
                <typeinst x-name="struct.slot.type" x-type="varchar">varchar</typeinst>
                <typeinst x-name="struct.slot.parent" x-type="varchar">slot</typeinst>
            </typeinst>
            <typeinst x-name="default_value" x-type="slot">
                <typeinst x-name="struct.slot.name" x-type="varchar">default_value</typeinst>
                <typeinst x-name="struct.slot.type" x-type="varchar">varchar</typeinst>
                <typeinst x-name="struct.slot.parent" x-type="varchar">slot</typeinst>
                <typeinst x-name="struct.slot.default_value" x-type="varchar"></typeinst>
            </typeinst>
            <typeinst x-name="optional_p" x-type="slot">
                <typeinst x-name="struct.slot.name" x-type="varchar">optional_p</typeinst>
                <typeinst x-name="struct.slot.type" x-type="varchar">bool</typeinst>
                <typeinst x-name="struct.slot.parent" x-type="varchar">slot</typeinst>
                <typeinst x-name="struct.slot.default_value" x-type="varchar">false</typeinst>
            </typeinst>
            <typeinst x-name="container" x-type="slot">
                <typeinst x-name="struct.slot.name" x-type="varchar">container</typeinst>
                <typeinst x-name="struct.slot.type" x-type="varchar">varchar</typeinst>
                <typeinst x-name="struct.slot.parent" x-type="varchar">slot</typeinst>
                <typeinst x-name="struct.slot.default_value" x-type="varchar"></typeinst>
            </typeinst>
        </struct>
        <typedecl x-name="pk" x-type="varchar"/>
        <typedecl x-name="is_final_if_no_scope" x-type="bool"/>
        <typeinst x-name="struct.type" x-type="varchar">struct</typeinst>
        <typeinst x-name="struct.name" x-type="varchar">struct</typeinst>
        <typeinst x-name="struct.nsp" x-type="varchar">::nest::data</typeinst>
        <typeinst x-name="name" x-type="slot">
            <typeinst x-name="struct.slot.name" x-type="varchar">name</typeinst>
            <typeinst x-name="struct.slot.type" x-type="varchar">varchar</typeinst>
            <typeinst x-name="struct.slot.parent" x-type="varchar">struct</typeinst>
        </typeinst>
        <typeinst x-name="type" x-type="slot">
            <typeinst x-name="struct.slot.name" x-type="varchar">type</typeinst>
            <typeinst x-name="struct.slot.type" x-type="varchar">varchar</typeinst>
            <typeinst x-name="struct.slot.parent" x-type="varchar">struct</typeinst>
        </typeinst>
        <typeinst x-name="nsp" x-type="slot">
            <typeinst x-name="struct.slot.name" x-type="varchar">nsp</typeinst>
            <typeinst x-name="struct.slot.type" x-type="varchar">varchar</typeinst>
            <typeinst x-name="struct.slot.parent" x-type="varchar">struct</typeinst>
        </typeinst>
        <typeinst x-name="pk" x-type="slot">
            <typeinst x-name="struct.slot.name" x-type="varchar">pk</typeinst>
            <typeinst x-name="struct.slot.type" x-type="varchar">varchar</typeinst>
            <typeinst x-name="struct.slot.parent" x-type="varchar">struct</typeinst>
        </typeinst>
        <typeinst x-name="is_final_if_no_scope" x-type="slot">
            <typeinst x-name="struct.slot.name" x-type="varchar">is_final_if_no_scope</typeinst>
            <typeinst x-name="struct.slot.type" x-type="varchar">bool</typeinst>
            <typeinst x-name="struct.slot.parent" x-type="varchar">struct</typeinst>
        </typeinst>
    </struct>
    <struct x-name="email" x-type="struct">
        <typedecl x-name="name" x-type="varchar" x-default_value=""/>
        <typedecl x-name="address" x-type="varchar"/>
        <typeinst x-name="struct.pk" x-type="varchar">address</typeinst>
        <typeinst x-name="struct.type" x-type="varchar">struct</typeinst>
        <typeinst x-name="struct.name" x-type="varchar">email</typeinst>
        <typeinst x-name="struct.nsp" x-type="varchar">::nest::data</typeinst>
        <typeinst x-name="name" x-type="slot">
            <typeinst x-name="struct.slot.name" x-type="varchar">name</typeinst>
            <typeinst x-name="struct.slot.type" x-type="varchar">varchar</typeinst>
            <typeinst x-name="struct.slot.parent" x-type="varchar">email</typeinst>
            <typeinst x-name="struct.slot.default_value" x-type="varchar"></typeinst>
        </typeinst>
        <typeinst x-name="address" x-type="slot">
            <typeinst x-name="struct.slot.name" x-type="varchar">address</typeinst>
            <typeinst x-name="struct.slot.type" x-type="varchar">varchar</typeinst>
            <typeinst x-name="struct.slot.parent" x-type="varchar">email</typeinst>
        </typeinst>
    </struct>
    <struct x-name="file" x-type="struct">
        <typedecl x-name="name" x-type="varchar"/>
        <typedecl x-name="mime_type" x-type="varchar"/>
        <typedecl x-name="size" x-type="int32"/>
        <typeinst x-name="struct.type" x-type="varchar">struct</typeinst>
        <typeinst x-name="struct.name" x-type="varchar">file</typeinst>
        <typeinst x-name="struct.nsp" x-type="varchar">::nest::data</typeinst>
        <typeinst x-name="name" x-type="slot">
            <typeinst x-name="struct.slot.name" x-type="varchar">name</typeinst>
            <typeinst x-name="struct.slot.type" x-type="varchar">varchar</typeinst>
            <typeinst x-name="struct.slot.parent" x-type="varchar">file</typeinst>
        </typeinst>
        <typeinst x-name="mime_type" x-type="slot">
            <typeinst x-name="struct.slot.name" x-type="varchar">mime_type</typeinst>
            <typeinst x-name="struct.slot.type" x-type="varchar">varchar</typeinst>
            <typeinst x-name="struct.slot.parent" x-type="varchar">file</typeinst>
        </typeinst>
        <typeinst x-name="size" x-type="slot">
            <typeinst x-name="struct.slot.name" x-type="varchar">size</typeinst>
            <typeinst x-name="struct.slot.type" x-type="varchar">int32</typeinst>
            <typeinst x-name="struct.slot.parent" x-type="varchar">file</typeinst>
        </typeinst>
    </struct>
    <struct x-name="folder" x-type="struct">
        <typedecl x-name="name" x-type="varchar"/>
        <typedecl x-name="num_items" x-type="int32"/>
        <typeinst x-name="struct.type" x-type="varchar">struct</typeinst>
        <typeinst x-name="struct.name" x-type="varchar">folder</typeinst>
        <typeinst x-name="struct.nsp" x-type="varchar">::nest::data</typeinst>
        <typeinst x-name="name" x-type="slot">
            <typeinst x-name="struct.slot.name" x-type="varchar">name</typeinst>
            <typeinst x-name="struct.slot.type" x-type="varchar">varchar</typeinst>
            <typeinst x-name="struct.slot.parent" x-type="varchar">folder</typeinst>
        </typeinst>
        <typeinst x-name="num_items" x-type="slot">
            <typeinst x-name="struct.slot.name" x-type="varchar">num_items</typeinst>
            <typeinst x-name="struct.slot.type" x-type="varchar">int32</typeinst>
            <typeinst x-name="struct.slot.parent" x-type="varchar">folder</typeinst>
        </typeinst>
    </struct>
    <struct x-name="category" x-type="struct">
        <typedecl x-name="category_name" x-type="varchar"/>
        <typedecl x-name="parent_category" x-type="varchar"/>
        <typeinst x-name="struct.type" x-type="varchar">struct</typeinst>
        <typeinst x-name="struct.name" x-type="varchar">category</typeinst>
        <typeinst x-name="struct.nsp" x-type="varchar">::nest::data</typeinst>
        <typeinst x-name="category_name" x-type="slot">
            <typeinst x-name="struct.slot.name" x-type="varchar">category_name</typeinst>
            <typeinst x-name="struct.slot.type" x-type="varchar">varchar</typeinst>
            <typeinst x-name="struct.slot.parent" x-type="varchar">category</typeinst>
        </typeinst>
        <typeinst x-name="parent_category" x-type="slot">
            <typeinst x-name="struct.slot.name" x-type="varchar">parent_category</typeinst>
            <typeinst x-name="struct.slot.type" x-type="varchar">varchar</typeinst>
            <typeinst x-name="struct.slot.parent" x-type="varchar">category</typeinst>
        </typeinst>
    </struct>
    <struct x-name="word_count_pair" x-type="struct">
        <typedecl x-name="word" x-type="varchar"/>
        <typedecl x-name="count" x-type="varint"/>
        <typeinst x-name="struct.type" x-type="varchar">struct</typeinst>
        <typeinst x-name="struct.name" x-type="varchar">word_count_pair</typeinst>
        <typeinst x-name="struct.nsp" x-type="varchar">::nest::data</typeinst>
        <typeinst x-name="word" x-type="slot">
            <typeinst x-name="struct.slot.name" x-type="varchar">word</typeinst>
            <typeinst x-name="struct.slot.type" x-type="varchar">varchar</typeinst>
            <typeinst x-name="struct.slot.parent" x-type="varchar">word_count_pair</typeinst>
        </typeinst>
        <typeinst x-name="count" x-type="slot">
            <typeinst x-name="struct.slot.name" x-type="varchar">count</typeinst>
            <typeinst x-name="struct.slot.type" x-type="varchar">varint</typeinst>
            <typeinst x-name="struct.slot.parent" x-type="varchar">word_count_pair</typeinst>
        </typeinst>
    </struct>
    <struct x-name="message" x-type="struct">
        <typeinst x-name="struct.pk" x-type="varchar">message_id</typeinst>
        <typeinst x-name="struct.is_final_if_no_scope" x-type="bool">yes</typeinst>
        <typedecl x-name="message_id" x-type="varint"/>
        <typedecl x-name="device" x-type="varchar" x-default_value="sms"/>
        <typedecl x-name="num_comments" x-type="int16" x-default_value="0"/>
        <typedecl x-name="subject" x-type="varchar"/>
        <typedecl x-name="body" x-type="varchar"/>
        <typedecl x-name="from" x-type="email"/>
        <typedecl x-name="to" x-type="email"/>
        <typedecl x-name="cc" x-type="email" x-container="multiple" x-default_value=""/>
        <typedecl x-name="bcc" x-type="email" x-container="multiple" x-default_value=""/>
        <typedecl x-name="public_p" x-type="bool" x-default_value="false"/>
        <typedecl x-name="categories" x-type="category" x-container="multiple" x-default_value=""/>
        <typedecl x-name="folders" x-type="folder" x-container="multiple" x-default_value=""/>
        <typedecl x-name="tags" x-type="varchar" x-container="multiple" x-default_value=""/>
        <typedecl x-name="attachment" x-type="file" x-container="multiple" x-default_value=""/>
        <struct x-name="wordcount_X" x-type="struct" x-container="map" x-default_value="">
            <typedecl x-name="word" x-type="varchar"/>
            <typedecl x-name="count" x-type="int32"/>
            <typeinst x-name="struct.type" x-type="varchar">struct</typeinst>
            <typeinst x-name="struct.name" x-type="varchar">wordcount_X</typeinst>
            <typeinst x-name="struct.nsp" x-type="varchar">::nest::lang</typeinst>
            <typeinst x-name="word" x-type="slot">
                <typeinst x-name="struct.slot.name" x-type="varchar">word</typeinst>
                <typeinst x-name="struct.slot.type" x-type="varchar">varchar</typeinst>
                <typeinst x-name="struct.slot.parent" x-type="varchar">wordcount_X</typeinst>
            </typeinst>
            <typeinst x-name="count" x-type="slot">
                <typeinst x-name="struct.slot.name" x-type="varchar">count</typeinst>
                <typeinst x-name="struct.slot.type" x-type="varchar">int32</typeinst>
                <typeinst x-name="struct.slot.parent" x-type="varchar">wordcount_X</typeinst>
            </typeinst>
        </struct>
        <typedecl x-name="wordcount_Y" x-type="word_count_pair"/>
        <typedecl x-name="wordcount_Z" x-type="word_count_pair" x-container="map" x-default_value=""/>
        <typedecl x-name="words" x-type="varchar"/>
        <typeinst x-name="struct.type" x-type="varchar">struct</typeinst>
        <typeinst x-name="struct.name" x-type="varchar">message</typeinst>
        <typeinst x-name="struct.nsp" x-type="varchar">::nest::data</typeinst>
        <typeinst x-name="message_id" x-type="slot">
            <typeinst x-name="struct.slot.name" x-type="varchar">message_id</typeinst>
            <typeinst x-name="struct.slot.type" x-type="varchar">varint</typeinst>
            <typeinst x-name="struct.slot.parent" x-type="varchar">message</typeinst>
        </typeinst>
        <typeinst x-name="device" x-type="slot">
            <typeinst x-name="struct.slot.name" x-type="varchar">device</typeinst>
            <typeinst x-name="struct.slot.type" x-type="varchar">varchar</typeinst>
            <typeinst x-name="struct.slot.parent" x-type="varchar">message</typeinst>
            <typeinst x-name="struct.slot.default_value" x-type="varchar">sms</typeinst>
        </typeinst>
        <typeinst x-name="num_comments" x-type="slot">
            <typeinst x-name="struct.slot.name" x-type="varchar">num_comments</typeinst>
            <typeinst x-name="struct.slot.type" x-type="varchar">int16</typeinst>
            <typeinst x-name="struct.slot.parent" x-type="varchar">message</typeinst>
            <typeinst x-name="struct.slot.default_value" x-type="varchar">0</typeinst>
        </typeinst>
        <typeinst x-name="subject" x-type="slot">
            <typeinst x-name="struct.slot.name" x-type="varchar">subject</typeinst>
            <typeinst x-name="struct.slot.type" x-type="varchar">varchar</typeinst>
            <typeinst x-name="struct.slot.parent" x-type="varchar">message</typeinst>
        </typeinst>
        <typeinst x-name="body" x-type="slot">
            <typeinst x-name="struct.slot.name" x-type="varchar">body</typeinst>
            <typeinst x-name="struct.slot.type" x-type="varchar">varchar</typeinst>
            <typeinst x-name="struct.slot.parent" x-type="varchar">message</typeinst>
        </typeinst>
        <typeinst x-name="from" x-type="slot">
            <typeinst x-name="struct.slot.name" x-type="varchar">from</typeinst>
            <typeinst x-name="struct.slot.type" x-type="varchar">email</typeinst>
            <typeinst x-name="struct.slot.parent" x-type="varchar">message</typeinst>
        </typeinst>
        <typeinst x-name="to" x-type="slot">
            <typeinst x-name="struct.slot.name" x-type="varchar">to</typeinst>
            <typeinst x-name="struct.slot.type" x-type="varchar">email</typeinst>
            <typeinst x-name="struct.slot.parent" x-type="varchar">message</typeinst>
        </typeinst>
        <typeinst x-name="cc" x-type="slot">
            <typeinst x-name="struct.slot.name" x-type="varchar">cc</typeinst>
            <typeinst x-name="struct.slot.type" x-type="varchar">email</typeinst>
            <typeinst x-name="struct.slot.parent" x-type="varchar">message</typeinst>
            <typeinst x-name="struct.slot.default_value" x-type="varchar"></typeinst>
            <typeinst x-name="struct.slot.container" x-type="varchar">multiple</typeinst>
        </typeinst>
        <typeinst x-name="bcc" x-type="slot">
            <typeinst x-name="struct.slot.name" x-type="varchar">bcc</typeinst>
            <typeinst x-name="struct.slot.type" x-type="varchar">email</typeinst>
            <typeinst x-name="struct.slot.parent" x-type="varchar">message</typeinst>
            <typeinst x-name="struct.slot.default_value" x-type="varchar"></typeinst>
            <typeinst x-name="struct.slot.container" x-type="varchar">multiple</typeinst>
        </typeinst>
        <typeinst x-name="public_p" x-type="slot">
            <typeinst x-name="struct.slot.name" x-type="varchar">public_p</typeinst>
            <typeinst x-name="struct.slot.type" x-type="varchar">bool</typeinst>
            <typeinst x-name="struct.slot.parent" x-type="varchar">message</typeinst>
            <typeinst x-name="struct.slot.default_value" x-type="varchar">false</typeinst>
        </typeinst>
        <typeinst x-name="categories" x-type="slot">
            <typeinst x-name="struct.slot.name" x-type="varchar">categories</typeinst>
            <typeinst x-name="struct.slot.type" x-type="varchar">category</typeinst>
            <typeinst x-name="struct.slot.parent" x-type="varchar">message</typeinst>
            <typeinst x-name="struct.slot.default_value" x-type="varchar"></typeinst>
            <typeinst x-name="struct.slot.container" x-type="varchar">multiple</typeinst>
        </typeinst>
        <typeinst x-name="folders" x-type="slot">
            <typeinst x-name="struct.slot.name" x-type="varchar">folders</typeinst>
            <typeinst x-name="struct.slot.type" x-type="varchar">folder</typeinst>
            <typeinst x-name="struct.slot.parent" x-type="varchar">message</typeinst>
            <typeinst x-name="struct.slot.default_value" x-type="varchar"></typeinst>
            <typeinst x-name="struct.slot.container" x-type="varchar">multiple</typeinst>
        </typeinst>
        <typeinst x-name="tags" x-type="slot">
            <typeinst x-name="struct.slot.name" x-type="varchar">tags</typeinst>
            <typeinst x-name="struct.slot.type" x-type="varchar">varchar</typeinst>
            <typeinst x-name="struct.slot.parent" x-type="varchar">message</typeinst>
            <typeinst x-name="struct.slot.default_value" x-type="varchar"></typeinst>
            <typeinst x-name="struct.slot.container" x-type="varchar">multiple</typeinst>
        </typeinst>
        <typeinst x-name="attachment" x-type="slot">
            <typeinst x-name="struct.slot.name" x-type="varchar">attachment</typeinst>
            <typeinst x-name="struct.slot.type" x-type="varchar">file</typeinst>
            <typeinst x-name="struct.slot.parent" x-type="varchar">message</typeinst>
            <typeinst x-name="struct.slot.default_value" x-type="varchar"></typeinst>
            <typeinst x-name="struct.slot.container" x-type="varchar">multiple</typeinst>
        </typeinst>
        <typeinst x-name="wordcount_Y" x-type="slot">
            <typeinst x-name="struct.slot.name" x-type="varchar">wordcount_Y</typeinst>
            <typeinst x-name="struct.slot.type" x-type="varchar">word_count_pair</typeinst>
            <typeinst x-name="struct.slot.parent" x-type="varchar">message</typeinst>
        </typeinst>
        <typeinst x-name="wordcount_Z" x-type="slot">
            <typeinst x-name="struct.slot.name" x-type="varchar">wordcount_Z</typeinst>
            <typeinst x-name="struct.slot.type" x-type="varchar">word_count_pair</typeinst>
            <typeinst x-name="struct.slot.parent" x-type="varchar">message</typeinst>
            <typeinst x-name="struct.slot.default_value" x-type="varchar"></typeinst>
            <typeinst x-name="struct.slot.container" x-type="varchar">map</typeinst>
        </typeinst>
        <typeinst x-name="words" x-type="slot">
            <typeinst x-name="struct.slot.name" x-type="varchar">words</typeinst>
            <typeinst x-name="struct.slot.type" x-type="varchar">varchar</typeinst>
            <typeinst x-name="struct.slot.parent" x-type="varchar">message</typeinst>
        </typeinst>
    </struct>
    <typeinst x-name="msg4" x-type="message">
        <typeinst x-name="message.subject" x-type="varchar">hello</typeinst>
        <typeinst x-name="message.from" x-type="email">
            <typeinst x-name="email.name" x-type="varchar">zena wow</typeinst>
            <typeinst x-name="email.address" x-type="varchar">zena@example.com</typeinst>
        </typeinst>
        <typeinst x-name="message.body" x-type="varchar">this is a test</typeinst>
        <typeinst x-name="message.to" x-type="email">
            <typeinst x-name="email.name" x-type="varchar">paris love</typeinst>
            <typeinst x-name="email.address" x-type="varchar">bff@example.com</typeinst>
        </typeinst>
        <typeinst x-name="message.cc" x-type="email">
            <typeinst x-name="email.name" x-type="varchar">jane awesome</typeinst>
            <typeinst x-name="email.address" x-type="varchar">jane@example.com</typeinst>
        </typeinst>
        <typeinst x-name="message.cc" x-type="email">
            <typeinst x-name="email.name" x-type="varchar">someone great</typeinst>
            <typeinst x-name="email.address" x-type="varchar">someone@example.com</typeinst>
        </typeinst>
        <typeinst x-name="message.bcc" x-type="email">
            <typeinst x-name="email.name" x-type="varchar">vera cool</typeinst>
            <typeinst x-name="email.address" x-type="varchar">vera@example.com</typeinst>
        </typeinst>
        <typeinst x-name="message.bcc" x-type="email">
            <typeinst x-name="email.name" x-type="varchar">greg wise</typeinst>
            <typeinst x-name="email.address" x-type="varchar">greg@example.com</typeinst>
        </typeinst>
        <typeinst x-name="message.bcc" x-type="email">
            <typeinst x-name="email.name" x-type="varchar">max loyal</typeinst>
            <typeinst x-name="email.address" x-type="varchar">max@example.com</typeinst>
        </typeinst>
        <typeinst x-name="message.wordcount_Y" x-type="word_count_pair">
            <typeinst x-name="word_count_pair.word" x-type="varchar">the</typeinst>
            <typeinst x-name="word_count_pair.count" x-type="varint">123</typeinst>
        </typeinst>
        <typeinst x-name="message.wordcount_Y" x-type="word_count_pair">
            <typeinst x-name="word_count_pair.word" x-type="varchar">and</typeinst>
            <typeinst x-name="word_count_pair.count" x-type="varint">54</typeinst>
        </typeinst>
    </typeinst>
    <typeinst x-name="msg3" x-type="message">
        <typeinst x-name="message.subject" x-type="varchar">hello</typeinst>
        <typeinst x-name="message.from" x-type="email">
            <typeinst x-name="email.name" x-type="varchar">zena wow</typeinst>
            <typeinst x-name="email.address" x-type="varchar">zena@example.com</typeinst>
        </typeinst>
        <typeinst x-name="message.to" x-type="email">
            <typeinst x-name="email.name" x-type="varchar">paris love</typeinst>
            <typeinst x-name="email.address" x-type="varchar">bff@example.com</typeinst>
        </typeinst>
        <typeinst x-name="message.body" x-type="varchar">this is a test</typeinst>
        <typeinst x-name="message.cc" x-type="email">
            <typeinst x-name="email.name" x-type="varchar">jane awesome</typeinst>
            <typeinst x-name="email.address" x-type="varchar">jane@example.com</typeinst>
        </typeinst>
        <typeinst x-name="message.cc" x-type="email">
            <typeinst x-name="email.name" x-type="varchar">someone great</typeinst>
            <typeinst x-name="email.address" x-type="varchar">someone@example.com</typeinst>
        </typeinst>
        <typeinst x-name="message.bcc" x-type="email">
            <typeinst x-name="email.name" x-type="varchar">vera cool</typeinst>
            <typeinst x-name="email.address" x-type="varchar">vera@example.com</typeinst>
        </typeinst>
        <typeinst x-name="message.bcc" x-type="email">
            <typeinst x-name="email.name" x-type="varchar">greg wise</typeinst>
            <typeinst x-name="email.address" x-type="varchar">greg@example.com</typeinst>
        </typeinst>
        <typeinst x-name="message.bcc" x-type="email">
            <typeinst x-name="email.name" x-type="varchar">max loyal</typeinst>
            <typeinst x-name="email.address" x-type="varchar">max@example.com</typeinst>
        </typeinst>
        <typeinst x-name="message.wordcount_Y" x-type="word_count_pair">
            <typeinst x-name="word_count_pair.word" x-type="varchar">the</typeinst>
            <typeinst x-name="word_count_pair.count" x-type="varint">123</typeinst>
        </typeinst>
        <typeinst x-name="message.wordcount_Y" x-type="word_count_pair">
            <typeinst x-name="word_count_pair.word" x-type="varchar">and</typeinst>
            <typeinst x-name="word_count_pair.count" x-type="varint">54</typeinst>
        </typeinst>
    </typeinst>
    <typeinst x-name="msg1" x-type="message">
        <typeinst x-name="subject" x-type="varchar">hello</typeinst>
        <typeinst x-name="from" x-type="email">
            <typeinst x-name="name" x-type="varchar">zena wow</typeinst>
            <typeinst x-name="address" x-type="varchar">zena@example.com</typeinst>
        </typeinst>
        <typeinst x-name="body" x-type="varchar">this is a test</typeinst>
    </typeinst>
    <typeinst x-name="msg2" x-type="message">
        <typeinst x-name="subject" x-type="varchar">hello</typeinst>
        <typeinst x-name="from" x-type="email">
            <typeinst x-name="name" x-type="varchar">zena wow</typeinst>
            <typeinst x-name="address" x-type="varchar">zena@example.com</typeinst>
        </typeinst>
        <typeinst x-name="body" x-type="varchar">this is a test</typeinst>
    </typeinst>
</nest>

