
# TODO: rename "sql_t" back to "sql" when done debugging 
# issues with "from.sql" and "from.inner_join.sql"

struct sql_t {

    struct from {
        optional varchar table

        # problem with optional is that it ends up reporting
        # an x-type="optional" of from.sql, without optional we
        # get an x-type="struct", also instance gets x-type="sql_t"
        # as opposed to x-type="sql_t.from.sql", which is what we want
        #
        # optional nest sql_t sql

        nest sql_t sql
        
        
        optional struct inner_join {

            # same comments as above, 
            # should report an x-type="sql_t.from.inner_join.sql"
            #
            # multiple nest sql_t sql

            nest sql_t sql

            varchar on
        }
    }
    optional varchar scope = {}
    optional multiple varchar select = {}
    required from from

}

sql_t query_posts_1 {
    scope {user}
    multiple select {
        title
        body
        date
        author
    }
    from { table blog_posts }
}

sql_t query_posts_2 {
    scope {user}
    multiple select {
        title
        body
        date
        author
    }
    from {
        sql blog_posts {
            multiple select {title body date author category_id}
            from { table blog_posts }
        }
    }
}

sql_t query_posts_3 {
    scope {user}
    multiple select {
        title
        body
        date
        author
    }
    from {
        inner_join pc {
            sql p { from { table blog_posts } }
            sql c { from { table blog_categories } }
            on { p.category_id = c.id }
        }
    }
}
